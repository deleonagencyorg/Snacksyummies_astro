---
import type { Locale } from '../../i18n/i18n';
import type { HeaderColorConfig } from '../../config/headerColors';

const { pathname } = Astro.url;
const currentPath = pathname;

export interface Props {
  activeLocale: Locale;
  headerColorConfig?: HeaderColorConfig;
}
const { activeLocale, headerColorConfig } = Astro.props;

// Mapeo de rutas equivalentes entre idiomas
const routeTranslations = {
  'recetas': 'recipes',
  'productos': 'products',
  'noticias': 'news',
  'contacto': 'contact',
  'marcas': 'brands',
  'nosotros': 'about-us',
  'blog': 'blog',
  'promociones': 'promotions',
  'ganadores': 'winners'
  // Agregar más rutas según sea necesario
};

// Extraer la ruta actual y el idioma
const pathParts = currentPath.split('/').filter(Boolean);
const currentLocale = pathParts[0] || 'es';
const currentRoute = pathParts.slice(1).join('/');

// Función para obtener la ruta traducida
const getTranslatedPath = (targetLocale: Locale) => {
  const pathParts = currentPath.split('/').filter(Boolean);
  const currentRoute = pathParts.slice(1).join('/');
  
  // Para la ruta raíz (/es o /en)
  if (pathParts.length <= 1) return `/${targetLocale}`;
  
  // Si estamos en una ruta mapeada, traducirla
  const translatedRoute = Object.entries(routeTranslations).reduce(
    (acc, [esRoute, enRoute]) => {
      if (currentLocale === 'es' && currentRoute.startsWith(esRoute)) {
        return currentRoute.replace(esRoute, enRoute);
      }
      if (currentLocale === 'en' && currentRoute.startsWith(enRoute)) {
        return currentRoute.replace(enRoute, esRoute);
      }
      return acc;
    },
    currentRoute
  );
  
  return `/${targetLocale}/${translatedRoute}`;
};

const esUrl = activeLocale === 'es' ? currentPath : getTranslatedPath('es');
const enUrl = activeLocale === 'en' ? currentPath : getTranslatedPath('en');

// Usar colores por defecto si no se proporciona configuración
const textColor = headerColorConfig?.textColor || 'text-white';
const hoverTextColor = headerColorConfig?.hoverTextColor || 'hover:text-yellow-300';
---

<div class="language-switcher flex flex-col md:flex-row items-center space-y-2 md:space-y-0 md:space-x-2">
  <div class="flex items-center space-x-2">
    <a href={esUrl} class={`language-link flex items-center ${activeLocale === 'es' ? 'font-bold text-yellow-500' : `${textColor} ${hoverTextColor}`}`} title="Español" data-lang="es">
      <span class="flag-icon mr-1">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="12" viewBox="0 0 16 12" class="inline-block">
          <rect width="16" height="12" fill="#0051BA"/>
          <rect y="4" width="16" height="4" fill="#FFFFFF"/>
          <circle cx="8" cy="6" r="1.5" fill="#0051BA"/>
          <path d="M8 7.5L8.5 8.5L7.5 8.5L8 7.5Z" fill="#0051BA"/>
        </svg>
      </span>
      <span class={textColor}>ES</span>
    </a>
    <span class="divider text-gray-400">|</span>
    <a href={enUrl} class={`language-link flex items-center ${activeLocale === 'en' ? 'font-bold text-yellow-500' : `${textColor} ${hoverTextColor}`}`} title="English" data-lang="en">
      <span class="flag-icon mr-1">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="12" viewBox="0 0 16 12" class="inline-block">
          <rect width="16" height="12" fill="#FFFFFF"/>
          <rect y="0" width="16" height="1" fill="#B22234"/>
          <rect y="2" width="16" height="1" fill="#B22234"/>
          <rect y="4" width="16" height="1" fill="#B22234"/>
          <rect y="6" width="16" height="1" fill="#B22234"/>
          <rect y="8" width="16" height="1" fill="#B22234"/>
          <rect y="10" width="16" height="1" fill="#B22234"/>
          <rect width="7" height="7" fill="#3C3B6E"/>
        </svg>
      </span>
      <span class={textColor}>EN</span>
    </a>
  </div>
  
  {activeLocale === 'es' && (
     <div class="mt-2 md:mt-0 md:ml-2 md:flex md:items-center">
      <span class="hidden md:inline divider text-gray-400">|</span>
      <a href="/es/yummiesone" class={`language-link flex items-center md:ml-2 ${currentPath.includes('/yummiesone') ? ' text-quinary bg-secondary' : 'text-primary hover:bg-secondary'}`} title="Yummies One">
        <span class={currentPath.includes('/yummiesone') ? 'bg-quinary rounded-md  px-2 py-1 text-primary' : 'text-white hover:bg-quinary p-2 rounded-md'}>Yummies One</span>
      </a>
    </div>
  )}
</div>

<style>
  .language-switcher {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
  }
  
  .language-link {
    color: var(--color-text, #fff);
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    transition: background-color 0.2s;
    font-size: 1rem;
  }
  
  .language-link:hover {
    background-color: var(--color-primary);
    color: var(--color-text, #fff);
  }
  
  .language-link.active {
    font-weight: bold;
    background-color: var(--color-primary);
    color: var(--color-text, #fff);
  }
  
  .divider {
    color: var(--color-text-light, #fff);
  }
  
  .flag-icon {
    font-size: 1.2em;
    line-height: 1;
  }
</style>
