---
// src/components/pages/RecipesPage.astro
import { t } from '../../i18n/i18n';
import type { Locale } from '../../i18n/i18n';
import { getLocale } from '../../i18n/i18n';
import './styles.css';
import RecipeCard from '../../components/recipes/RecipeCard.astro';
import Categories from '../../components/recipes/Categories.astro';
import LazyImage from '../../components/common/LazyImage.astro';
import banner from '../../assets/Banner recetas animado.png';
import group from '../../assets/Group 40.png';
interface Recipe {
  id: string;
  title: string;
  image?: string;
  preparation_time: number;
  type?: string;
  brand?: string;
  servings?: number;
  difficulty?: string;
  slug?: string;
}

const currentLang = getLocale();

// Pass current language to client-side script
const clientLang = currentLang;

// Get all recipe files with correct Vite glob typing
const recipeModules = import.meta.glob<{default: Recipe}>('../../locales/*/recipes/*.json');
const allRecipes: Recipe[] = [];

// Process each file
for (const path in recipeModules) {
  const lang = path.split('/')[3]; // Extract language from path
  if (lang === currentLang) {
    const module = await recipeModules[path]();
    allRecipes.push(module.default);
  }
}

// Compute featured recipe (always the first from full list)
const featured = allRecipes[0];
const featuredTitle = featured?.title ?? '';
const featuredTime = featured ? `${featured.preparation_time}MIN` : '';
const featuredImage = featured?.image || '/images/recipes/placeholder.jpg';
const featuredId = featured?.id ?? '';
const featuredServings = (featured as any)?.servings ?? 0;
const featuredDifficulty = (featured as any)?.difficulty ?? '---';
const featuredSlug = featured?.slug ?? '';

---
<div id="hero" class="relative w-full aspect-[4/3] md:h-[32rem] overflow-hidden" transition:animate="fade">
  <LazyImage 
    src={banner.src} 
    alt="Recipes Banner" 
    class="absolute inset-0 w-full h-full object-fill"
    width={banner.width}
    height={banner.height}
  />

  <!-- Overlay group image: slides in from right and stays aligned to the right on the banner -->
  <LazyImage
    src={group.src}
    alt="Group overlay"
    class="group-image"
  />
</div>

<!-- Categories Section -->
<Categories 
  recipeTitle={featuredTitle} 
  time={featuredTime} 
  image={featuredImage} 
  id={featuredId}
  servings={featuredServings}
  difficulty={featuredDifficulty}
  slug={featuredSlug}
/>

<div class="bg-gradient-to-r from-blue-400 to-blue-500 py-12">

  <div class="container mx-auto px-4 mt-12">

    {allRecipes.length === 0 ? (
      <p class="text-center text-white">{t('page.no_recipes', { namespace: 'recipes' })}</p>
    ) : (
      <div class="max-w-[1028px] mx-auto flex flex-col gap-14 items-center">
        <!-- Title -->
        {(() => {
          const allTitle = currentLang === 'es' ? 'Todas las recetas' : 'All recipes';
          return (
            <h2 class="text-white font-title text-[40px] font-bold leading-[40px] text-center w-full">
              {allTitle}
            </h2>
          );
        })()}
        
        <!-- Recipe Grid -->
        {(() => {
          const itemsPerPage = 6; // Mostrar 6 recetas inicialmente
          const totalRecipes = allRecipes.length;

          return (
            <div>
              <div class="w-full">
                <div id="recipes-grid" data-items-per-page={itemsPerPage} data-total-recipes={totalRecipes} data-loaded-count={Math.min(itemsPerPage, totalRecipes)} class="flex flex-wrap gap-10 justify-center">
                  {allRecipes.map((recipe: any, index: number) => {
                    const isVisible = index < itemsPerPage;
                    return (
                      <div 
                        data-recipe-index={index} 
                        data-brand={recipe.brand || 'unknown'}
                        class={`recipe-item ${isVisible ? 'block' : 'hidden'}`}
                      >
                        <RecipeCard
                          image={recipe.image || '/images/recipes/placeholder.jpg'}
                          title={recipe.title}
                          time={`${recipe.preparation_time}MIN`}
                          id={recipe.id}
                          slug={recipe.slug}
                          textColor="text-gray-800"
                          iconColor="text-gray-800"
                        />
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Load More Button */}
              <div class="flex justify-center mt-8">
                <button 
                  id="load-more-btn" 
                  class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-bold py-3 px-8 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
                  style={totalRecipes <= itemsPerPage ? 'display: none;' : ''}
                >
                  <span id="load-more-text">{t('page.load_more', { namespace: 'recipes' })}</span>
                  <span id="loading-text" class="hidden">{t('page.loading', { namespace: 'recipes' })}</span>
                </button>
                
                <div id="no-more-recipes" class="hidden text-gray-600 font-medium py-3">
                  {t('page.no_more_recipes', { namespace: 'recipes' })}
                </div>
              </div>
            </div>
          );
        })()}
      </div>
    )}
  </div>
</div>

<style>
  /* Slide the group image from right into a right-aligned position and keep it above the banner */
  .group-image {
    position: absolute;
    right: 6%;              /* aligned to the right side of the hero */
    top: 50%;
    z-index: 10;
    width: 48.50475rem;     /* requested width */
    height: 14.00113rem;    /* requested height */
    flex-shrink: 0;
    object-fit: contain;
    transform: translate(100%, -50%); /* start off to the right */
    opacity: 0;
    animation: slideInToRight 800ms ease-out forwards;
    pointer-events: none;
  }

  @keyframes slideInToRight {
    from {
      transform: translate(100%, -50%);
      opacity: 0;
    }
    to {
      transform: translate(0, -50%); /* right-aligned position */
      opacity: 1;
    }
  }

  /* Responsive tweak: make overlay smaller on small screens */
  @media (max-width: 768px) {
    .group-image {
      width: 65%;
      height: auto;
      right: 4%;
      animation-duration: 700ms;
    }
  }

  /* Fallback for very small screens */
  @media (max-width: 500px) {
    .group-image {
      width: 55%;
    }
  }
</style>

<script>
  // This script runs only on the client side
  document.addEventListener('DOMContentLoaded', () => {
    // Fallback image handling
    const images = document.querySelectorAll('img');
    images.forEach(img => {
      img.addEventListener('error', function() {
        this.src = '/images/recipes/placeholder.jpg';
      });
    });

    // Brand filtering and infinite scroll functionality
    const grid = document.getElementById('recipes-grid');
    const loadMoreBtn = document.getElementById('load-more-btn');
    const loadMoreText = document.getElementById('load-more-text');
    const loadingText = document.getElementById('loading-text');
    const noMoreRecipes = document.getElementById('no-more-recipes');
    
    if (!grid || !loadMoreBtn || !loadMoreText || !loadingText || !noMoreRecipes) return;

    const itemsPerPage = parseInt(grid.dataset.itemsPerPage || '6');
    const totalRecipes = parseInt(grid.dataset.totalRecipes || '0');
    let loadedCount = parseInt(grid.dataset.loadedCount || itemsPerPage.toString());
    let currentBrandFilter = 'all';
    
    // Get current language from URL
    const currentLang = window.location.pathname.includes('/es/') ? 'es' : 'en';
    
    // Get all recipe items
    const allRecipeItems = Array.from(grid.querySelectorAll('.recipe-item'));
    
    // Filter recipes by brand
    function getFilteredRecipes(brand: string) {
      if (brand === 'all') {
        return allRecipeItems;
      }
      return allRecipeItems.filter(item => {
        const recipeBrand = item.getAttribute('data-brand');
        return recipeBrand === brand;
      });
    }
    
    // Reset and apply brand filter
    function applyBrandFilter(brand: string) {
      currentBrandFilter = brand;
      const filteredRecipes = getFilteredRecipes(brand);
      
      // Hide all recipes first
      allRecipeItems.forEach(item => {
        item.classList.add('hidden');
        item.classList.remove('block');
      });
      
      // Show filtered recipes (up to itemsPerPage)
      const recipesToShow = filteredRecipes.slice(0, itemsPerPage);
      recipesToShow.forEach(item => {
        item.classList.remove('hidden');
        item.classList.add('block');
      });
      
      // Update counters
      loadedCount = recipesToShow.length;
      if (grid) grid.dataset.loadedCount = loadedCount.toString();
      
      // Update load more button visibility
      if (filteredRecipes.length <= itemsPerPage) {
        if (loadMoreBtn) loadMoreBtn.style.display = 'none';
        if (filteredRecipes.length === 0) {
          if (noMoreRecipes) {
            noMoreRecipes.classList.remove('hidden');
            noMoreRecipes.textContent = currentLang === 'es' 
              ? 'No hay recetas para esta marca' 
              : 'No recipes for this brand';
          }
        } else {
          if (noMoreRecipes) noMoreRecipes.classList.add('hidden');
        }
      } else {
        if (loadMoreBtn) loadMoreBtn.style.display = 'block';
        if (noMoreRecipes) noMoreRecipes.classList.add('hidden');
      }
    }
    
    // Listen for brand filter changes
    document.addEventListener('brandFilterChange', (event) => {
      const customEvent = event as CustomEvent;
      const selectedBrand = customEvent.detail.brand;
      applyBrandFilter(selectedBrand);
    });

    loadMoreBtn.addEventListener('click', () => {
      // Show loading state
      loadMoreText.classList.add('hidden');
      loadingText.classList.remove('hidden');
      (loadMoreBtn as HTMLButtonElement).disabled = true;
      loadMoreBtn.classList.add('opacity-75', 'cursor-not-allowed');

      // Simulate loading delay for better UX
      setTimeout(() => {
        const filteredRecipes = getFilteredRecipes(currentBrandFilter);
        const nextBatch = Math.min(itemsPerPage, filteredRecipes.length - loadedCount);
        
        // Show next batch of filtered recipes
        const recipesToShow = filteredRecipes.slice(loadedCount, loadedCount + nextBatch);
        recipesToShow.forEach((recipeItem, index) => {
          const htmlElement = recipeItem as HTMLElement;
          htmlElement.classList.remove('hidden');
          htmlElement.classList.add('block');
          
          // Add fade-in animation
          htmlElement.style.opacity = '0';
          htmlElement.style.transform = 'translateY(20px)';
          htmlElement.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
          
          setTimeout(() => {
            htmlElement.style.opacity = '1';
            htmlElement.style.transform = 'translateY(0)';
          }, index * 100); // Staggered animation
        });
        
        loadedCount += nextBatch;
        grid.dataset.loadedCount = loadedCount.toString();
        
        // Reset button state
        loadMoreText.classList.remove('hidden');
        loadingText.classList.add('hidden');
        (loadMoreBtn as HTMLButtonElement).disabled = false;
        loadMoreBtn.classList.remove('opacity-75', 'cursor-not-allowed');
        
        // Check if all filtered recipes are loaded
        if (loadedCount >= filteredRecipes.length) {
          if (loadMoreBtn) loadMoreBtn.style.display = 'none';
          if (noMoreRecipes) {
            noMoreRecipes.classList.remove('hidden');
            noMoreRecipes.textContent = currentLang === 'es' 
              ? 'No hay más recetas para mostrar' 
              : 'No more recipes to show';
          }
        }
      }, 800); // 800ms loading delay
    });
    
    // Initialize with 'all' filter
    applyBrandFilter('all');
  });
</script>
