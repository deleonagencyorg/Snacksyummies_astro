---
// Componente de carrusel 3D para nuevos productos
interface Product {
  id: string;
  image: string;
  alt: string;
  link?: string;
}

export interface Props {
  products: Product[];
  imageWidth?: number;
  imageHeight?: number;
  autoplay?: boolean;
  speed?: number;
  className?: string;
}

const {
  products = [],
  imageWidth = 300,
  imageHeight = 300,
  autoplay = true,
  speed = 5000,
  className = ''
} = Astro.props;

console.log('Props recibidos en NewProductsCarousel:', Astro.props);
console.log('Valor inicial de products:', products);

const currentLang = Astro.url.pathname.split('/')[1] === 'es' ? 'es' : 'en';

// Asegurarse de que products es un array
const productsItems = Array.isArray(products) ? products : [];
console.log('Productos procesados:', productsItems);

// Verificar estructura de cada producto
productsItems.forEach((product, index) => {
  console.log(`Producto ${index}:`, product);
  if (!product.image) console.warn(`Producto ${index} no tiene imagen`);
  if (!product.alt) console.warn(`Producto ${index} no tiene texto alternativo`);
});

import LazyImage from '../LazyImage.astro';
import './styles.css';
---


<div class={`products-carousel-3d ${className}`} data-autoplay={autoplay} data-speed={speed}>
  <div id="carousel" class="carousel-container">
    <div class="carousel-stage">
      {productsItems.map((product, index) => (
        <div class="carousel-item" data-position={index}>
          <a href={product.link || '#'} class="product-link">
            <LazyImage 
              src={product.image} 
              alt={product.alt}
              class="product-image"
              width={imageWidth}
              height={imageHeight}
            />
          </a>
        </div>
      ))}
    </div>
  </div>
  <div class="carousel-controls">
    <div class="controls-container">
      <button class="carousel-button prev" aria-label="Previous">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="arrow-icon">
          <path d="M15 18l-6-6 6-6"/>
        </svg>
      </button>
      <button class="carousel-button next" aria-label="Next">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="arrow-icon">
          <path d="M9 18l6-6-6-6"/>
        </svg>
      </button>
    </div>

  </div>
  <div id="base"class="w-full flex items-center justify-center">
    <div class="md:w-[60%] w-full z-0 mx-auto">
      <LazyImage src="https://snack.yummiespromociones.com/snacksyummies/basenewproducts.webp" alt="Base de productos nuevos" 
      class="z-0 w-full  translate-y-[-12rem] md:translate-y-[-18rem]" />
    </div>
  </div>
</div>

<script>
  interface Carousel3DOptions {
    autoplay?: boolean;
    speed?: number;
  }

  class Carousel3D {
    private container: HTMLElement;
    private stage: HTMLElement;
    private items: HTMLElement[];
    private dots: HTMLElement[];
    private prevBtn: HTMLElement;
    private nextBtn: HTMLElement;
    private totalItems: number;
    private currentIndex: number;
    private autoplay: boolean;
    private speed: number;
    private interval: ReturnType<typeof setInterval> | null;

    constructor(container: HTMLElement, options: Carousel3DOptions = {}) {
      this.container = container;
      this.stage = container.querySelector('.carousel-stage') as HTMLElement;
      this.items = Array.from(container.querySelectorAll('.carousel-item')) as HTMLElement[];
      this.dots = Array.from(container.querySelectorAll('.carousel-dot')) as HTMLElement[];
      this.prevBtn = container.querySelector('.carousel-button.prev') as HTMLElement;
      this.nextBtn = container.querySelector('.carousel-button.next') as HTMLElement;
      this.totalItems = this.items.length;
      this.currentIndex = 0;
      this.autoplay = options.autoplay ?? true;
      this.speed = options.speed ?? parseInt(container.dataset.speed || '5000', 10);
      this.interval = null;

      if (this.totalItems > 0) {
        this.init();
      }
    }

    private init(): void {
      this.updateCarousel();
      this.setupEventListeners();
      if (this.autoplay) {
        this.startAutoplay();
      }
    }

    private updateCarousel(): void {
      this.items.forEach((item: HTMLElement, index: number) => {
        const angle = (360 / this.totalItems) * (index - this.currentIndex);
        const zIndex = Math.round(100 - Math.abs(angle));
        const scale = Math.max(0.6, 1 - Math.abs(angle) / 360);
        const opacity = Math.max(0.4, 1 - Math.abs(angle) / 180);

        item.style.transform = `rotateY(${angle}deg) translateZ(300px) scale(${scale})`;
        item.style.zIndex = zIndex.toString();
        item.style.opacity = "1";
      });

      this.dots.forEach((dot: HTMLElement, index: number) => {
        dot.classList.toggle('active', index === this.currentIndex);
      });
    }

    private setupEventListeners(): void {
      this.prevBtn.addEventListener('click', () => this.prev());
      this.nextBtn.addEventListener('click', () => this.next());

      this.dots.forEach((dot: HTMLElement, index: number) => {
        dot.addEventListener('click', () => this.goTo(index));
      });

      this.container.addEventListener('mouseenter', () => this.stopAutoplay());
      this.container.addEventListener('mouseleave', () => {
        if (this.autoplay) {
          this.startAutoplay();
        }
      });

      // Soporte para gestos tÃ¡ctiles
      let startX = 0;
      let isDragging = false;

      this.stage.addEventListener('touchstart', (e: TouchEvent) => {
        startX = e.touches[0].clientX;
        isDragging = true;
      });

      this.stage.addEventListener('touchmove', (e: TouchEvent) => {
        if (!isDragging) return;

        const currentX = e.touches[0].clientX;
        const diff = currentX - startX;

        if (Math.abs(diff) > 50) {
          if (diff > 0) {
            this.prev();
          } else {
            this.next();
          }
          isDragging = false;
        }
      });

      this.stage.addEventListener('touchend', () => {
        isDragging = false;
      });
    }

    private next(): void {
      this.currentIndex = (this.currentIndex + 1) % this.totalItems;
      this.updateCarousel();
    }

    private prev(): void {
      this.currentIndex = (this.currentIndex - 1 + this.totalItems) % this.totalItems;
      this.updateCarousel();
    }

    private goTo(index: number): void {
      this.currentIndex = index;
      this.updateCarousel();
    }

    private startAutoplay(): void {
      if (!this.interval) {
        this.interval = setInterval(() => this.next(), this.speed);
      }
    }

    private stopAutoplay(): void {
      if (this.interval) {
        clearInterval(this.interval);
        this.interval = null;
      }
    }
  }

  // Inicializar carruseles
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.products-carousel-3d');
    carousels.forEach((element: Element) => {
      if (element instanceof HTMLElement) {
        new Carousel3D(element, {
          autoplay: element.dataset.autoplay !== 'false',
          speed: parseInt(element.dataset.speed || '5000', 10)
        });
      }
    });
  });
</script>
