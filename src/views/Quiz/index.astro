---
// src/views/Quiz/index.astro
import { t } from '../../i18n/i18n';
import type { Locale } from '../../i18n/i18n';
import { getLocale } from '../../i18n/i18n';
import Breadcrumb from '../../components/common/Breadcrumb/Breadcrumb.astro';
import CrownTitle from '../../components/common/CrownTitle/CrownTitle.astro';
import { fade } from 'astro:transitions';

const currentLang = getLocale();

// Cargar datos del quiz desde el archivo JSON correspondiente
let quizData: any = {};
let questions: any[] = [];
let navigation: any = {};
let progress: any = {};
let personalities: any[] = [];
let resultsText: any = {};

try {
  quizData = {
    title: t('title', { namespace: 'quiz', locale: currentLang }),
    subtitle: t('subtitle', { namespace: 'quiz', locale: currentLang }),
    questions: t('questions', { namespace: 'quiz', locale: currentLang }) || [],
    navigation: t('navigation', { namespace: 'quiz', locale: currentLang }) || {},
    progress: t('progress', { namespace: 'quiz', locale: currentLang }) || {},
    personalities: t('personalities', { namespace: 'quiz', locale: currentLang }) || [],
    results: t('results', { namespace: 'quiz', locale: currentLang }) || {}
  };
  
  questions = quizData.questions;
  navigation = quizData.navigation;
  progress = quizData.progress;
  personalities = quizData.personalities;
  resultsText = quizData.results;
  
  console.log('Quiz loaded successfully:', {
    questionsCount: questions.length,
    hasNavigation: !!navigation,
    hasProgress: !!progress
  });
} catch (error) {
  console.error('Error loading quiz data:', error);
  questions = [];
  navigation = { previous: 'Anterior', next: 'Siguiente', result: 'Resultado' };
  progress = { of: 'de' };
}

// Breadcrumb data
const breadcrumbItems = [
  { label: t('nav.home'), href: `/${currentLang}` },
  { label: quizData.title || 'Quiz', href: `/${currentLang}/quiz` }
];
---

<section class="min-h-screen bg-primary py-16 px-4" transition:animate={fade({ duration: '0.3s' })}>
  <div class="container mx-auto max-w-4xl">
    <!-- Breadcrumb -->
    <div class="mb-8">
      <Breadcrumb items={breadcrumbItems} />
    </div>

    <!-- Header -->
    <div class="text-center mb-12">
      <CrownTitle 
        title={quizData.title || 'Quiz Yummies'} 
        subtitle={quizData.subtitle || 'Descubre tu personalidad'}
        titleColor="text-white"
        subtitleColor="text-white/80"
      />
    </div>

    <!-- Quiz Container -->
    <div class="bg-white rounded-3xl shadow-2xl overflow-hidden">
      <!-- Progress Bar -->
      <div class="bg-gray-100 p-6">
        <div class="flex items-center justify-between mb-4">
          <div class="flex items-center space-x-3">
            <div class="w-12 h-12 bg-primary rounded-full flex items-center justify-center">
              <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
              </svg>
            </div>
            <span class="text-lg font-semibold text-gray-700" id="progress-text">1 {progress.of || 'de'} {questions.length}</span>
          </div>
        </div>
        <div class="w-full bg-gray-200 rounded-full h-3">
          <div class="bg-red h-3 rounded-full transition-all duration-500 ease-out" 
               style="width: 20%" id="progress-bar"></div>
        </div>
      </div>

      <!-- Quiz Content -->
      <div class="p-8">
        <!-- Question Container -->
        <div id="quiz-container">
          {questions.length > 0 ? (
            questions.map((question: any, index: number) => (
              <div class={`question-slide ${index === 0 ? 'active' : 'hidden'}`} data-question={index + 1}>
                <h2 class="text-2xl font-bold text-gray-800 mb-8 text-center">
                  {question.question}
                </h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
                  {question.options.map((option: any) => (
                    <label class="option-card cursor-pointer group">
                      <input 
                        type="checkbox" 
                        name={`question-${question.id}`}
                        value={option.id}
                        class="hidden option-input"
                      />
                      <div class="p-4 border-2 border-gray-200 rounded-xl transition-all duration-300 hover:border-primary hover:bg-primary/5 group-hover:shadow-md">
                        <div class="flex items-center space-x-3">
                          <div class="w-6 h-6 border-2 border-gray-300 rounded-md flex items-center justify-center transition-all duration-300 checkbox-indicator">
                            <svg class="w-4 h-4 text-white hidden checkmark" fill="currentColor" viewBox="0 0 20 20">
                              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                            </svg>
                          </div>
                          <span class="text-gray-700 font-medium flex-1">{option.text}</span>
                        </div>
                      </div>
                    </label>
                  ))}
                </div>
              </div>
            ))
          ) : (
            <div class="text-center py-12">
              <div class="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                </svg>
              </div>
              <h3 class="text-xl font-semibold text-gray-600 mb-2">No hay preguntas disponibles</h3>
              <p class="text-gray-500">Por favor, intenta recargar la p√°gina.</p>
            </div>
          )}
        </div>

        <!-- Navigation Buttons - Centered below questions -->
        <div class="flex justify-center items-center pt-8 mt-4 border-t border-gray-200 gap-6">
          <!-- Previous Button -->
          <button 
            id="prev-btn"
            class="flex items-center justify-center w-14 h-14 bg-primary text-white rounded-full transition-all duration-300 hover:bg-primary/90 shadow-md disabled:opacity-50 disabled:cursor-not-allowed disabled:bg-gray-300"
            disabled
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/></svg>
          </button>

          <!-- Navigation Text (hidden on mobile) -->
          <div class="hidden md:flex items-center justify-center space-x-6">
            <span class="text-gray-500 font-medium text-lg">{navigation.previous || 'Anterior'}</span>
            <span class="text-primary font-bold text-lg" id="next-text">{navigation.next || 'Siguiente'}</span>
          </div>

          <!-- Next Button -->
          <button 
            id="next-btn"
            class="flex items-center justify-center w-14 h-14 bg-primary text-white rounded-full transition-all duration-300 hover:bg-primary/90 shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/></svg>
          </button>
        </div>
      </div>
    </div>

    <!-- Results Section (Hidden initially) -->
    <div id="results-section" class="hidden mt-8">
      <div class="bg-primary rounded-3xl shadow-2xl overflow-hidden">
        <div class="p-8 text-center">
          <h2 class="text-2xl font-bold text-white mb-2" id="results-title"></h2>
          <div class="flex flex-col md:flex-row items-center justify-center gap-8 mt-8">
            <div class="w-full md:w-1/2 text-left text-white">
              <h3 class="text-3xl font-bold mb-4" id="personality-title"></h3>
              <p class="text-xl mb-6" id="personality-description"></p>
              <p class="text-lg mb-8" id="personality-emoji"></p>
              
              <div class="mt-6">
                <p class="text-white/80 mb-3" id="share-text"></p>
                <div class="flex space-x-4">
                  <a href="#" class="text-white hover:text-white/80" aria-label="Facebook">
                    <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24"><path d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z"/></svg>
                  </a>
                  <a href="#" class="text-white hover:text-white/80" aria-label="Instagram">
                    <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24"><path d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z"/></svg>
                  </a>
                  <a href="#" class="text-white hover:text-white/80" aria-label="Twitter">
                    <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"/></svg>
                  </a>
                  <a href="#" class="text-white hover:text-white/80" aria-label="YouTube">
                    <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24"><path d="M23.498 6.186a3.016 3.016 0 00-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 00.502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 002.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 002.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/></svg>
                  </a>
                  <a href="#" class="text-white hover:text-white/80" aria-label="TikTok">
                    <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24"><path d="M12.525.02c1.31-.02 2.61-.01 3.91-.02.08 1.53.63 3.09 1.75 4.17 1.12 1.11 2.7 1.62 4.24 1.79v4.03c-1.44-.05-2.89-.35-4.2-.97-.57-.26-1.1-.59-1.62-.93-.01 2.92.01 5.84-.02 8.75-.08 1.4-.54 2.79-1.35 3.94-1.31 1.92-3.58 3.17-5.91 3.21-1.43.08-2.86-.31-4.08-1.03-2.02-1.19-3.44-3.37-3.65-5.71-.02-.5-.03-1-.01-1.49.18-1.9 1.12-3.72 2.58-4.96 1.66-1.44 3.98-2.13 6.15-1.72.02 1.48-.04 2.96-.04 4.44-.99-.32-2.15-.23-3.02.37-.63.41-1.11 1.04-1.36 1.75-.21.51-.15 1.07-.14 1.61.24 1.64 1.82 3.02 3.5 2.87 1.12-.01 2.19-.66 2.77-1.61.19-.33.4-.67.41-1.06.1-1.79.06-3.57.07-5.36.01-4.03-.01-8.05.02-12.07z"/></svg>
                  </a>
                </div>
              </div>
              
              <div class="flex space-x-4 mt-8">
                <button 
                  id="restart-btn"
                  class="px-6 py-3 bg-blue-800 text-white rounded-xl font-semibold transition-all duration-300 hover:bg-blue-700"
                ></button>
                <a 
                  id="home-btn"
                  href="/"
                  class="px-6 py-3 bg-white text-primary rounded-xl font-semibold transition-all duration-300 hover:bg-gray-100"
                ></a>
              </div>
            </div>
            
            <div class="w-full md:w-1/2 flex justify-center">
              <div class="relative">
                <!-- Radial background effect -->
                <div class="absolute inset-0 bg-blue-900 rounded-full scale-150 z-0" style="background: radial-gradient(circle, #00337C 0%, #00337C 50%, transparent 100%);"></div>
                <!-- Product image -->
                <img id="personality-image" src="" alt="" class="relative z-10 max-w-xs transform rotate-2 animate-float">
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ questions, navigation, progress, personalities, resultsText }}>
  class QuizManager {
    constructor() {
      this.currentQuestion = 0;
      this.totalQuestions = questions.length;
      this.answers = {};
      this.navigation = navigation;
      this.progress = progress;
      this.init();
    }

    init() {
      // Ensure we have valid data before initializing
      if (this.totalQuestions === 0) {
        console.warn('No questions available for quiz');
        return;
      }
      this.bindEvents();
      this.updateUI();
    }

    bindEvents() {
      // Navigation buttons
      document.getElementById('prev-btn').addEventListener('click', () => this.previousQuestion());
      document.getElementById('next-btn').addEventListener('click', () => this.nextQuestion());
      document.getElementById('restart-btn').addEventListener('click', () => this.restartQuiz());

      // Option selection
      document.querySelectorAll('.option-input').forEach(input => {
        input.addEventListener('change', (e) => this.handleOptionChange(e));
      });
    }

    handleOptionChange(e) {
      const questionId = e.target.name;
      const optionId = e.target.value;
      const isChecked = e.target.checked;

      // Initialize answers array for this question if it doesn't exist
      if (!this.answers[questionId]) {
        this.answers[questionId] = [];
      }

      if (isChecked) {
        // Add option to answers
        if (!this.answers[questionId].includes(optionId)) {
          this.answers[questionId].push(optionId);
        }
      } else {
        // Remove option from answers
        this.answers[questionId] = this.answers[questionId].filter(id => id !== optionId);
      }

      // Update checkbox visual state
      this.updateCheckboxes();
      this.updateNavigationState();
    }

    updateCheckboxes() {
      document.querySelectorAll('.option-card').forEach(card => {
        const input = card.querySelector('.option-input');
        const indicator = card.querySelector('.checkbox-indicator');
        const checkmark = card.querySelector('.checkmark');
        const cardDiv = card.querySelector('div');

        if (input.checked) {
          indicator.classList.add('bg-primary', 'border-primary');
          indicator.classList.remove('border-gray-300');
          checkmark.classList.remove('hidden');
          cardDiv.classList.add('border-primary', 'bg-primary/10');
          cardDiv.classList.remove('border-gray-200');
        } else {
          indicator.classList.remove('bg-primary', 'border-primary');
          indicator.classList.add('border-gray-300');
          checkmark.classList.add('hidden');
          cardDiv.classList.remove('border-primary', 'bg-primary/10');
          cardDiv.classList.add('border-gray-200');
        }
      });
    }

    previousQuestion() {
      if (this.currentQuestion > 0) {
        this.currentQuestion--;
        this.showQuestion(this.currentQuestion);
        this.updateUI();
      }
    }

    nextQuestion() {
      if (this.currentQuestion < this.totalQuestions - 1) {
        this.currentQuestion++;
        this.showQuestion(this.currentQuestion);
        this.updateUI();
      } else {
        this.showResults();
      }
    }

    showQuestion(index) {
      document.querySelectorAll('.question-slide').forEach((slide, i) => {
        if (i === index) {
          slide.classList.remove('hidden');
          slide.classList.add('active');
        } else {
          slide.classList.add('hidden');
          slide.classList.remove('active');
        }
      });

      // Restore checkbox states for current question
      setTimeout(() => {
        this.updateCheckboxes();
      }, 100);
    }

    updateUI() {
      // Update progress
      const progressPercent = ((this.currentQuestion + 1) / this.totalQuestions) * 100;
      const progressBar = document.getElementById('progress-bar');
      const progressText = document.getElementById('progress-text');
      
      if (progressBar) progressBar.style.width = `${progressPercent}%`;
      if (progressText) {
        progressText.textContent = `${this.currentQuestion + 1} ${this.progress.of || 'de'} ${this.totalQuestions}`;
      }

      // Update navigation buttons
      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
      const nextText = document.getElementById('next-text');

      const isPrevDisabled = this.currentQuestion === 0;
      if (prevBtn) prevBtn.disabled = isPrevDisabled;

      const nextButtonText = this.currentQuestion === this.totalQuestions - 1 
        ? this.navigation.result || 'Resultado' 
        : this.navigation.next || 'Siguiente';

      // Update text if element exists (might be hidden on mobile)
      if (nextText) nextText.textContent = nextButtonText;
      
      // Add aria-label to buttons for accessibility
      if (prevBtn) prevBtn.setAttribute('aria-label', navigation.previous || 'Anterior');
      if (nextBtn) nextBtn.setAttribute('aria-label', nextButtonText);

      this.updateNavigationState();
    }

    updateNavigationState() {
      // Check if current question has any answers
      const currentQuestionName = `question-${questions[this.currentQuestion].id}`;
      const hasAnswers = this.answers[currentQuestionName] && this.answers[currentQuestionName].length > 0;
      
      // Get the next button if not already available from updateUI
      const nextBtn = document.getElementById('next-btn');

      if (nextBtn) nextBtn.disabled = !hasAnswers;
    }

    showResults() {
      document.getElementById('quiz-container').parentElement.parentElement.classList.add('hidden');
      document.getElementById('results-section').classList.remove('hidden');

      // Seleccionar una personalidad aleatoria
      const randomIndex = Math.floor(Math.random() * personalities.length);
      const personality = personalities[randomIndex];
      
      // Actualizar elementos de la UI con la personalidad seleccionada
      document.getElementById('results-title').textContent = resultsText.title || 'Tu resultado:';
      document.getElementById('personality-title').textContent = personality.title;
      document.getElementById('personality-description').textContent = personality.description;
      document.getElementById('personality-emoji').textContent = personality.emoji;
      document.getElementById('share-text').textContent = resultsText.share || 'Comparte en redes';
      document.getElementById('restart-btn').textContent = resultsText.restart || 'Repetir Quiz';
      document.getElementById('home-btn').textContent = resultsText.home || 'Home page';
      
      // Actualizar imagen
      const imgElement = document.getElementById('personality-image');
      imgElement.src = personality.image;
      imgElement.alt = personality.title;
      
      // Actualizar enlace del bot√≥n home
      const homeBtn = document.getElementById('home-btn');
      const currentLang = window.location.pathname.split('/')[1] || 'es';
      homeBtn.href = `/${currentLang}`;
      
    }

    restartQuiz() {
      this.currentQuestion = 0;
      this.answers = {};
      
      // Reset all checkboxes
      document.querySelectorAll('.option-input').forEach(input => {
        input.checked = false;
      });

      // Show quiz container and hide results
      document.getElementById('quiz-container').parentElement.parentElement.classList.remove('hidden');
      document.getElementById('results-section').classList.add('hidden');

      // Show first question
      this.showQuestion(0);
      this.updateUI();
      this.updateCheckboxes();
    }
  }

  // Initialize quiz when DOM is loaded
  function initializeQuiz() {
    // Clean up any existing quiz manager
    if (window.quizManager) {
      window.quizManager = null;
    }
    
    // Only initialize if we have questions
    if (questions && questions.length > 0) {
      window.quizManager = new QuizManager();
    } else {
      console.warn('Quiz initialization failed: No questions available');
    }
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeQuiz);
  } else {
    initializeQuiz();
  }

  // Reinitialize on page navigation (for language switching)
  document.addEventListener('astro:page-load', initializeQuiz);
</script>

<style>
  .question-slide {
    transition: opacity 0.3s ease-in-out;
  }

  .question-slide.active {
    opacity: 1;
  }

  .question-slide.hidden {
    opacity: 0;
  }

  .option-card:hover .checkbox-indicator {
    transform: scale(1.05);
  }

  .checkbox-indicator {
    transition: all 0.3s ease;
  }

  #progress-bar {
    transition: width 0.5s ease-out;
  }

  .container {
    animation: fadeInUp 0.6s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-float {
    animation: float 3s ease-in-out infinite;
  }
  
  @keyframes float {
    0% {
      transform: translateY(0px) rotate(2deg);
    }
    50% {
      transform: translateY(-10px) rotate(2deg);
    }
    100% {
      transform: translateY(0px) rotate(2deg);
    }
  }
</style>
