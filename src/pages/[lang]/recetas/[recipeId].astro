---
// src/pages/[lang]/recetas/[recipeId].astro
import { t, setLocale, getLocale, type Locale } from '../../../i18n/i18n';
import MainLayout from '../../../layouts/MainLayout.astro';

export async function getStaticPaths() {
  const paths: Array<{
    params: { lang: string; recipeId: string };
    props: { recipe: any; locale: Locale };
  }> = [];
  // Obtener las recetas en español
  const esRecipes = t('items', { namespace: 'recipes', locale: 'es' });
  // Obtener las recetas en inglés
  const enRecipes = t('items', { namespace: 'recipes', locale: 'en' });
  
  // Generar rutas para las recetas en español
  esRecipes.forEach((recipe: any) => {
    paths.push({
      params: { lang: 'es', recipeId: recipe.id },
      props: { recipe, locale: 'es' }
    });
  });
  
  // Generar rutas para las recetas en inglés
  enRecipes.forEach((recipe: any) => {
    paths.push({
      params: { lang: 'en', recipeId: recipe.id },
      props: { recipe, locale: 'en' }
    });
  });
  
  return paths;
}

const { recipe, locale } = Astro.props;
const { lang, recipeId } = Astro.params as { lang: Locale; recipeId: string };

// Establecer el idioma actual
setLocale(lang);

// Obtener traducciones para la dificultad
const difficultyLabel = t(`difficulty.${recipe.difficulty}`, { namespace: 'recipes' });

// Obtener otras recetas para la sección de "Recetas relacionadas"
const allRecipes = t('items', { namespace: 'recipes' });
const relatedRecipes = allRecipes
  .filter((r: any) => r.id !== recipe.id)
  .filter((r: any) => {
    // Encontrar recetas con al menos una etiqueta en común
    const commonTags = r.tags?.filter((tag: string) => recipe.tags?.includes(tag));
    return commonTags && commonTags.length > 0;
  })
  .slice(0, 3); // Limitar a 3 recetas relacionadas

const pageTitle = recipe.title;
const pageDescription = recipe.description;
---

<MainLayout title={pageTitle} description={pageDescription}>
  <div class="bg-white py-12">
    <div class="container mx-auto px-4">
      <!-- Navegación de migas de pan -->
      <div class="mb-6">
        <a href={`/${lang}/`} class="text-gray-500 hover:text-yellow-600">{t('welcome', { namespace: 'common' })}</a>
        <span class="mx-2 text-gray-400">/</span>
        <a href={`/${lang}/recetas`} class="text-gray-500 hover:text-yellow-600">{t('page.title', { namespace: 'recipes' })}</a>
        <span class="mx-2 text-gray-400">/</span>
        <span class="text-gray-900">{recipe.title}</span>
      </div>
      
      <!-- Contenido principal de la receta -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Imagen y detalles principales -->
        <div class="lg:col-span-2">
          <h1 class="text-4xl font-bold mb-4">{recipe.title}</h1>
          <p class="text-lg text-gray-600 mb-6">{recipe.description}</p>
          
          <div class="relative rounded-lg overflow-hidden mb-8 h-80 lg:h-96">
            <img 
              src={recipe.image || '/images/recipes/placeholder.jpg'} 
              alt={recipe.title} 
              class="w-full h-full object-cover"
              onerror="this.src='/images/recipes/placeholder.jpg'"
            />
          </div>
          
          <!-- Información de preparación -->
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8 bg-gray-50 p-4 rounded-lg">
            <div class="text-center">
              <div class="font-semibold text-gray-700">{t('detail.preparation_time', { namespace: 'recipes' })}</div>
              <div class="text-lg">{recipe.preparation_time} min</div>
            </div>
            <div class="text-center">
              <div class="font-semibold text-gray-700">{t('detail.cooking_time', { namespace: 'recipes' })}</div>
              <div class="text-lg">{recipe.cooking_time} min</div>
            </div>
            <div class="text-center">
              <div class="font-semibold text-gray-700">{t('detail.servings', { namespace: 'recipes' })}</div>
              <div class="text-lg">{recipe.servings}</div>
            </div>
            <div class="text-center">
              <div class="font-semibold text-gray-700">{t('detail.difficulty', { namespace: 'recipes' })}</div>
              <div class="text-lg">{difficultyLabel}</div>
            </div>
          </div>
          
          <!-- Instrucciones -->
          <div class="mb-8">
            <h2 class="text-2xl font-bold mb-4">{t('detail.instructions', { namespace: 'recipes' })}</h2>
            <ol class="list-decimal pl-5 space-y-3">
              {recipe.instructions.map((instruction: string, index: number) => (
                <li class="text-gray-700">{instruction}</li>
              ))}
            </ol>
          </div>
          
          <!-- Etiquetas -->
          {recipe.tags && recipe.tags.length > 0 && (
            <div class="flex flex-wrap gap-2 mb-8">
              {recipe.tags.map((tag: string) => (
                <span class="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm">{tag}</span>
              ))}
            </div>
          )}
          
          <!-- Botón para volver -->
          <div class="mt-8">
            <a 
              href={`/${lang}/recetas`} 
              class="inline-flex items-center text-yellow-600 hover:text-yellow-800"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
              </svg>
              {t('detail.back', { namespace: 'recipes' })}
            </a>
          </div>
        </div>
        
        <!-- Barra lateral con ingredientes y recetas relacionadas -->
        <div class="lg:col-span-1">
          <!-- Ingredientes -->
          <div class="bg-gray-50 p-6 rounded-lg mb-8">
            <h2 class="text-2xl font-bold mb-4">{t('detail.ingredients', { namespace: 'recipes' })}</h2>
            <ul class="space-y-2">
              {recipe.ingredients.map((ingredient: string) => (
                <li class="flex items-start">
                  <span class="inline-block w-4 h-4 mt-1 mr-2 bg-yellow-500 rounded-full"></span>
                  <span>{ingredient}</span>
                </li>
              ))}
            </ul>
          </div>
          
          <!-- Recetas relacionadas -->
          {relatedRecipes.length > 0 && (
            <div>
              <h2 class="text-2xl font-bold mb-4">{t('detail.related_recipes', { namespace: 'recipes' })}</h2>
              <div class="space-y-4">
                {relatedRecipes.map((relatedRecipe: any) => (
                  <a href={`/${lang}/recetas/${relatedRecipe.id}`} class="block group">
                    <div class="flex items-center">
                      <div class="w-20 h-20 flex-shrink-0 rounded-md overflow-hidden">
                        <img 
                          src={relatedRecipe.image || '/images/recipes/placeholder.jpg'} 
                          alt={relatedRecipe.title} 
                          class="w-full h-full object-cover"
                          onerror="this.src='/images/recipes/placeholder.jpg'"
                        />
                      </div>
                      <div class="ml-4">
                        <h3 class="font-medium text-gray-900 group-hover:text-yellow-600 transition-colors">{relatedRecipe.title}</h3>
                        <p class="text-sm text-gray-500 line-clamp-1">{relatedRecipe.description}</p>
                      </div>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  // Fix para las imágenes que no cargan
  document.addEventListener('DOMContentLoaded', () => {
    // Ya no es necesario este código porque usamos el atributo onerror en las imágenes
  });
</script>
