---
import { getAsset, getAssetObject } from '../i18n/assetUtils';
import { getLocale } from '../i18n/i18n';

interface Props {
  assetKey: string;
  class?: string;
  width?: number;
  height?: number;
  loading?: 'eager' | 'lazy';
  fallbackSrc?: string;
  alt?: string;
  id?: string;
  style?: string;
  sizes?: string;
  decoding?: 'sync' | 'async' | 'auto';
  fetchpriority?: 'high' | 'low' | 'auto';
}

const { 
  assetKey, 
  class: className = '', 
  width, 
  height, 
  loading = 'lazy',
  fallbackSrc = '',
  alt: providedAlt,
  id,
  style,
  sizes,
  decoding,
  fetchpriority
} = Astro.props;

// Obtener la ruta de la imagen según el idioma actual
let src = '';
let alt = providedAlt || '';

const currentLocale = getLocale(); // Get locale once

try {
  // Intentar obtener la imagen como un string simple
  src = await getAsset(assetKey, currentLocale);
  
  // Si no hay alt proporcionado, intentar obtenerlo del archivo de traducción
  if (!providedAlt) {
    try {
      // Primero intentar obtener un objeto completo por si tiene propiedades adicionales
      const assetObj = await getAssetObject<{src?: string; alt?: string}>(assetKey, currentLocale);
      if (assetObj && assetObj.alt) {
        alt = assetObj.alt;
      } else {
        // Si no hay un objeto con alt, intentar buscar una clave específica para alt
        const assetKeyParts = assetKey.split('.');
        const lastPart = assetKeyParts[assetKeyParts.length - 1];
        const altKey = [...assetKeyParts.slice(0, -1), lastPart + '_alt'].join('.');
        const altText = await getAsset(altKey, currentLocale);
        if (altText) {
          alt = altText;
        } else {
          // Si no hay texto alternativo, usar la clave como texto alternativo
          alt = assetKey.split('.').pop() || '';
        }
      }
    } catch (error) {
      // Si hay error al obtener el alt, usar la clave como texto alternativo
      console.warn(`Error fetching alt text for ${assetKey}, falling back to key.`, error);
      alt = assetKey.split('.').pop() || '';
    }
  }
} catch (error) {
  console.error(`Error loading image data for key: ${assetKey}`, error);
  // src will remain empty or use fallbackSrc if provided
}

// Si después de todo no hay src, usar un placeholder o el fallbackSrc
if (!src) {
  src = fallbackSrc || `/images/${currentLocale}/placeholder.jpg`;
  // If src became empty due to an error, and no alt was set, provide a generic alt
  if (!alt && !providedAlt) {
    alt = `Placeholder image for ${assetKey.split('.').pop() || 'asset'}`;
  }
}
---

<img 
  src={src} 
  alt={alt} 
  class={className}
  width={width} 
  height={height}
  loading={loading}
  id={id}
  style={style}
  sizes={sizes}
  decoding={decoding}
  fetchpriority={fetchpriority}
/>
