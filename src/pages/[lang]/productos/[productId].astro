---
// src/pages/[lang]/productos/[productId].astro
import { t, setLocale, getLocale, type Locale } from '../../../i18n/i18n';
import MainLayout from '../../../layouts/MainLayout.astro';

export async function getStaticPaths() {
  const paths: Array<{
    params: { lang: string; productId: string };
    props: { product: any; locale: Locale };
  }> = [];
  // Obtener los productos en español
  const esProducts = t('items', { namespace: 'products', locale: 'es' });
  // Obtener los productos en inglés
  const enProducts = t('items', { namespace: 'products', locale: 'en' });
  
  // Generar rutas para los productos en español
  esProducts.forEach((product: any) => {
    paths.push({
      params: { lang: 'es', productId: product.id },
      props: { product, locale: 'es' }
    });
  });
  
  // Generar rutas para los productos en inglés
  enProducts.forEach((product: any) => {
    paths.push({
      params: { lang: 'en', productId: product.id },
      props: { product, locale: 'en' }
    });
  });
  
  return paths;
}

const { product, locale } = Astro.props;
const { lang, productId } = Astro.params as { lang: Locale; productId: string };

// Establecer el idioma actual
setLocale(lang);

// Obtener traducciones para categorías
const categories = t('categories', { namespace: 'products' });

// Obtener otros productos para la sección de "Productos relacionados"
const allProducts = t('items', { namespace: 'products' });
const relatedProducts = allProducts
  .filter((p: any) => p.id !== product.id)
  .filter((p: any) => {
    // Productos de la misma categoría o con etiquetas comunes
    return p.category === product.category || 
      (p.tags && product.tags && p.tags.some((tag: string) => product.tags.includes(tag)));
  })
  .slice(0, 3); // Limitar a 3 productos relacionados

const pageTitle = product.title;
const pageDescription = product.description;
---

<MainLayout title={pageTitle} description={pageDescription}>
  <div class="bg-white py-12">
    <div class="container mx-auto px-4">
      <!-- Navegación de migas de pan -->
      <div class="mb-6">
        <a href={`/${lang}/`} class="text-gray-500 hover:text-yellow-600">{t('welcome', { namespace: 'common' })}</a>
        <span class="mx-2 text-gray-400">/</span>
        <a href={`/${lang}/productos`} class="text-gray-500 hover:text-yellow-600">{t('page.title', { namespace: 'products' })}</a>
        <span class="mx-2 text-gray-400">/</span>
        <span class="text-gray-900">{product.title}</span>
      </div>
      
      <!-- Contenido principal del producto -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-12">
        <!-- Imagen del producto -->
        <div>
          <div class="relative rounded-lg overflow-hidden h-96 lg:h-[500px] bg-gray-100">
            <img 
              src={product.image || '/images/products/placeholder.jpg'} 
              alt={product.title} 
              class="w-full h-full object-contain"
              onerror="this.src='/images/products/placeholder.jpg'"
            />
          </div>
        </div>
        
        <!-- Información del producto -->
        <div>
          <div class="mb-2">
            <span class="inline-block bg-yellow-100 text-yellow-800 text-sm font-medium px-2.5 py-0.5 rounded">
              {categories[product.category] || product.category}
            </span>
          </div>
          <h1 class="text-4xl font-bold mb-4">{product.title}</h1>
          <p class="text-lg text-gray-600 mb-6">{product.description}</p>
          
          <!-- Tamaños disponibles -->
          {product.sizes && product.sizes.length > 0 && (
            <div class="mb-8">
              <h2 class="text-xl font-semibold mb-3">{t('detail.sizes', { namespace: 'products' }) || 'Tamaños disponibles'}</h2>
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {product.sizes.map((size: any) => (
                  <div class="border border-gray-200 rounded-md p-4 hover:border-yellow-500 transition-colors">
                    <div class="font-medium">{size.name}</div>
                    <div class="text-sm text-gray-500">{size.weight}</div>
                    <div class="text-xs text-gray-400 mt-1">SKU: {size.sku}</div>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          <!-- Sugerencia de preparación -->
          {product.serving_suggestion && (
            <div class="mb-8">
              <h2 class="text-xl font-semibold mb-2">{t('detail.serving_suggestion', { namespace: 'products' })}</h2>
              <p class="text-gray-600">{product.serving_suggestion}</p>
            </div>
          )}
          
          <!-- Etiquetas -->
          {product.tags && product.tags.length > 0 && (
            <div class="flex flex-wrap gap-2 mb-8">
              {product.tags.map((tag: string) => (
                <span class="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm">{tag}</span>
              ))}
            </div>
          )}
          
          <!-- Botón para volver -->
          <div class="mt-8">
            <a 
              href={`/${lang}/productos`} 
              class="inline-flex items-center text-yellow-600 hover:text-yellow-800"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
              </svg>
              {t('detail.back', { namespace: 'products' })}
            </a>
          </div>
        </div>
      </div>
      
      <!-- Información adicional en pestañas -->
      <div class="border-t border-gray-200 pt-10">
        <div class="tabs">
          <div class="tab-header flex border-b border-gray-200 mb-6">
            <button class="tab-button active px-6 py-3 font-medium text-gray-900 border-b-2 border-yellow-500" data-tab="ingredients">
              {t('detail.ingredients', { namespace: 'products' })}
            </button>
            <button class="tab-button px-6 py-3 font-medium text-gray-500 hover:text-gray-900" data-tab="nutritional">
              {t('detail.nutritional_info', { namespace: 'products' })}
            </button>
            <button class="tab-button px-6 py-3 font-medium text-gray-500 hover:text-gray-900" data-tab="where-to-buy">
              {t('detail.where_to_buy', { namespace: 'products' })}
            </button>
          </div>
          
          <div class="tab-content" id="ingredients">
            <h3 class="text-2xl font-bold mb-4">{t('detail.ingredients', { namespace: 'products' })}</h3>
            <ul class="list-disc pl-5 space-y-1">
              {product.ingredients.map((ingredient: string) => (
                <li class="text-gray-700">{ingredient}</li>
              ))}
            </ul>
          </div>
          
          <div class="tab-content hidden" id="nutritional">
            <h3 class="text-2xl font-bold mb-4">{t('detail.nutritional_info', { namespace: 'products' })}</h3>
            {product.nutritional_info && (
              <div class="bg-gray-50 p-6 rounded-lg">
                <div class="grid grid-cols-2 gap-4">
                  <div class="border-b border-gray-200 pb-2">
                    <div class="text-sm text-gray-500">{t('nutritional_info.serving_size', { namespace: 'products' }) || 'Tamaño de porción'}</div>
                    <div class="font-medium">{product.nutritional_info.serving_size}</div>
                  </div>
                  <div class="border-b border-gray-200 pb-2">
                    <div class="text-sm text-gray-500">{t('nutritional_info.calories', { namespace: 'products' }) || 'Calorías'}</div>
                    <div class="font-medium">{product.nutritional_info.calories}</div>
                  </div>
                  <div class="border-b border-gray-200 pb-2">
                    <div class="text-sm text-gray-500">{t('nutritional_info.fat', { namespace: 'products' }) || 'Grasa'}</div>
                    <div class="font-medium">{product.nutritional_info.fat}</div>
                  </div>
                  <div class="border-b border-gray-200 pb-2">
                    <div class="text-sm text-gray-500">{t('nutritional_info.carbs', { namespace: 'products' }) || 'Carbohidratos'}</div>
                    <div class="font-medium">{product.nutritional_info.carbs}</div>
                  </div>
                  <div class="border-b border-gray-200 pb-2">
                    <div class="text-sm text-gray-500">{t('nutritional_info.protein', { namespace: 'products' }) || 'Proteína'}</div>
                    <div class="font-medium">{product.nutritional_info.protein}</div>
                  </div>
                  <div class="border-b border-gray-200 pb-2">
                    <div class="text-sm text-gray-500">{t('nutritional_info.sodium', { namespace: 'products' }) || 'Sodio'}</div>
                    <div class="font-medium">{product.nutritional_info.sodium}</div>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <div class="tab-content hidden" id="where-to-buy">
            <h3 class="text-2xl font-bold mb-4">{t('detail.where_to_buy', { namespace: 'products' })}</h3>
            <p class="text-gray-600 mb-4">{t('where_to_buy.description', { namespace: 'products' }) || 'Nuestros productos están disponibles en las siguientes tiendas:'}</p>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <div class="border border-gray-200 rounded-lg p-4 hover:border-yellow-500 transition-colors">
                <h4 class="font-bold">Supermercados La Colonia</h4>
                <p class="text-gray-600 text-sm">Todas las sucursales</p>
              </div>
              <div class="border border-gray-200 rounded-lg p-4 hover:border-yellow-500 transition-colors">
                <h4 class="font-bold">Walmart</h4>
                <p class="text-gray-600 text-sm">Todas las sucursales</p>
              </div>
              <div class="border border-gray-200 rounded-lg p-4 hover:border-yellow-500 transition-colors">
                <h4 class="font-bold">Supermercados La Antorcha</h4>
                <p class="text-gray-600 text-sm">Todas las sucursales</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Productos relacionados -->
      {relatedProducts.length > 0 && (
        <div class="mt-16">
          <h2 class="text-2xl font-bold mb-6">{t('detail.related_products', { namespace: 'products' })}</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {relatedProducts.map((relatedProduct: any) => (
              <a href={`/${lang}/productos/${relatedProduct.id}`} class="group">
                <div class="bg-white rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow duration-300">
                  <div class="relative h-48 overflow-hidden">
                    <img 
                      src={relatedProduct.image || '/images/products/placeholder.jpg'} 
                      alt={relatedProduct.title} 
                      class="w-full h-full object-cover"
                      onerror="this.src='/images/products/placeholder.jpg'"
                    />
                  </div>
                  <div class="p-4">
                    <h3 class="font-medium text-gray-900 group-hover:text-yellow-600 transition-colors">{relatedProduct.title}</h3>
                    <p class="text-sm text-gray-500 line-clamp-2">{relatedProduct.short_description}</p>
                  </div>
                </div>
              </a>
            ))}
          </div>
        </div>
      )}
    </div>
  </div>
</MainLayout>

<script>
  // Fix para las imágenes que no cargan
  document.addEventListener('DOMContentLoaded', () => {
    // Ya no es necesario este código porque usamos el atributo onerror en las imágenes
    
    // Funcionalidad para las pestañas
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Desactivar todas las pestañas
        tabButtons.forEach(btn => btn.classList.remove('active', 'border-yellow-500', 'text-gray-900'));
        tabButtons.forEach(btn => btn.classList.add('text-gray-500'));
        tabContents.forEach(content => content.classList.add('hidden'));
        
        // Activar la pestaña seleccionada
        button.classList.add('active', 'border-yellow-500', 'text-gray-900');
        button.classList.remove('text-gray-500');
        
        const tabId = button.getAttribute('data-tab') || '';
        const tabContent = document.getElementById(tabId);
        if (tabContent) {
          tabContent.classList.remove('hidden');
        }
      });
    });
  });
</script>
