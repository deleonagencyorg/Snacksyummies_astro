---
/**
 * Componente para crear secciones con efecto parallax
 * Usa Rellax.js internamente para crear el efecto
 * 
 * Props:
 * - backgroundImage: URL de la imagen de fondo
 * - height: altura de la sección (default: 500px)
 * - speed: velocidad del efecto parallax (negativo sube, positivo baja)
 * - overlayColor: color del overlay (default: rgba(0,0,0,0.4))
 * - textColor: color del texto (default: white)
 * - class: clases CSS adicionales
 */
export interface Props {
  backgroundImage: string;
  height?: string;
  speed?: number;
  overlayColor?: string;
  textColor?: string;
  class?: string;
}

const {
  backgroundImage,
  height = "500px",
  speed = -3,
  overlayColor = "rgba(0,0,0,0.4)",
  textColor = "white",
  class: className = "",
} = Astro.props;
---

<div class={`parallax-section ${className}`} style={`min-height: ${height};`}>
  <div 
    class="parallax-background rellax-element" 
    style={`background-image: url(${backgroundImage});`}
    data-rellax-speed={speed}
  ></div>
  <div class="parallax-overlay" style={`background-color: ${overlayColor};`}></div>
  <div class="parallax-content" style={`color: ${textColor};`}>
    <slot />
  </div>
</div>

<style>
  .parallax-section {
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .parallax-background {
    position: absolute;
    top: -20%;
    left: 0;
    width: 100%;
    height: 140%;
    background-size: cover;
    background-position: center;
    z-index: 1;
  }
  
  .parallax-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
  }
  
  .parallax-content {
    position: relative;
    z-index: 3;
    width: 100%;
    padding: 2rem;
    text-align: center;
  }
</style>

<script>
  import Rellax from 'rellax';
  
  // Inicializar Rellax cuando el DOM esté cargado
  document.addEventListener('DOMContentLoaded', () => {
    const rellax = new Rellax('.rellax-element', {
      center: true,
      callback: function(positions) {
        // callback opcional después de cada actualización
      }
    });
    
    // Actualizar Rellax en caso de cambios en el tamaño de la ventana
    window.addEventListener('resize', () => {
      if (rellax) {
        rellax.refresh();
      }
    });
  });
</script>
