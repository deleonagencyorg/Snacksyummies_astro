---
// src/views/Brands/index.astro
import LazyImage from '../../components/common/LazyImage.astro';
import { t } from '../../i18n/i18n';
import type { Locale } from '../../i18n/i18n';
import { getLocale } from '../../i18n/i18n';
import BrandCardSkeleton from '../../components/brands/BrandCardSkeleton.astro';
import SkeletonLoader from '../../components/common/SkeletonLoader.astro';
import Breadcrumb from '../../components/common/Breadcrumb/Breadcrumb.astro';
import CrownTitle from '../../components/common/CrownTitle/CrownTitle.astro';
import FloatingChip from '../../components/common/FloatingChip/index.astro';
import Categories from '../../components/recipes/Categories.astro';
import { fade } from 'astro:transitions';
import './styles.css';

const currentLang = getLocale();

// Estado de carga para mostrar skeletons
let isLoading = true;
let loadError = false;

// Intentar cargar datos con manejo de errores
let brandsData = [];
let pageTitle = '';
let pageDescription = '';
let homeAssets:any = [];

try {
  // Cargar datos de marcas
  brandsData = t('brands', { namespace: 'brands', locale: currentLang }) || [];
  homeAssets = t('home', { namespace: 'brands', locale: currentLang }) || [];
  
  // Cargar título y descripción
  pageTitle = t('home.title', { namespace: 'brands' }) || 'Marcas';
  pageDescription = t('home.description', { namespace: 'brands' }) || 'Nuestras marcas';
  
  isLoading = false;
} catch (error) {
  console.error('Error al cargar datos de marcas:', error);
  brandsData = [];
  pageTitle = currentLang === 'es' ? 'Marcas' : 'Brands';
  pageDescription = currentLang === 'es' ? 'Nuestras marcas' : 'Our brands';
  loadError = true;
  isLoading = false;
}

// Número de skeletons a mostrar durante la carga
const skeletonCount = 3;

// Client-side filtering only: render all brands and filter in browser
const filteredBrands = brandsData;

// Normalized category items for Categories component (use brand.id as slug)
const categoryItems = (brandsData || []).map((b: any) => ({
  label: b?.title || b?.id,
  slug: b?.id,
  logo: b?.logo,
  bgColor: b?.bgColor || '#E5E7EB'
}));
---

<div class="brands-container bg-white" transition:name="brands-container" transition:animate={fade({ duration: '0.5s' })}>
  <div class="container mx-auto px-4">
    <Breadcrumb 
      items={[
        { label: 'Home', href: `/${currentLang}` },
        { label: currentLang === 'es' ? 'Marcas' : 'Brands', href: Astro.url.pathname },
      ]}
      textColor="text-primary"
    />
  </div>
 </div>
    
  <header class="brands-header text-center" transition:name="brands-header" transition:animate={fade({ duration: '0.7s' })}>
    <div>
      <CrownTitle
        title={currentLang === 'es' ? 'Marcas' : 'Brands'}
        subtitle={currentLang === 'es' ? '' : ''}
        transition:animate={fade({ duration: '0.8s' })}
      />
      <Categories 
        title=""
        items={categoryItems}
        allLabel={currentLang === 'es' ? 'TODAS' : 'ALL'}
        queryKey="brand"
        baseHref={Astro.url.pathname}
        showArrows={true}
        hideTitle={true}
      />
    </div>
  </header>
</div>

<div class="container mx-auto px-4 mt-4">
  <div class="brands-list" transition:name="brands-list" transition:animate={fade({ duration: '0.6s' })}>
    {isLoading ? (
      // Mostrar skeletons durante la carga
      Array(skeletonCount).fill(0).map((_, i) => (
        <div transition:name={`brand-skeleton-${i}`} transition:animate={fade({ duration: '0.4s' })}>
          <BrandCardSkeleton />
        </div>
      ))
    ) : loadError ? (
      // Mostrar mensaje de error si falla la carga
      <div class="error-message p-8 text-center bg-red-50 rounded-lg" transition:name="brands-error" transition:animate={fade({ duration: '0.5s' })}>
        <p class="text-red-600 text-xl">No se pudieron cargar las marcas. Por favor, intenta de nuevo más tarde.</p>
      </div>
    ) : (
      // Mostrar datos reales cuando estén disponibles
      filteredBrands.map((brand: any, index: number) => (
        <div 
          id={brand.id} 
          data-brand={brand.id}
          class="brand-card relative flex items-center"
          transition:name={`brand-card-${brand.id}`}
          transition:animate={fade({ duration: '0.6s' })}
        >
          <div class="brand-card-bg" style={`background-color: ${brand.bgColor || '#ffffff'}`}></div>
          <!-- Mobile chip images positioned at brand card corners -->
          {brand.imageChip1 && (
            <FloatingChip
              src={brand.imageChip1}
              alt="Chip"
              size="lg"
              position="top: 10%; left: 10%;"
              animationDuration={10}
              class="chip-mobile chip-top-left"
            />
          )}
          {brand.imageChip2 && (
            <FloatingChip
              src={brand.imageChip2}
              alt="Chip"
              size="xl"
              position="top: 10%; right: 10%;"
              animationDuration={12}
              class="chip-mobile chip-top-right"
            />
          )}
          {brand.imageChip3 && (
            <FloatingChip
              src={brand.imageChip3}
              alt="Chip"
              size="lg"
              position="bottom: 10%; left: 10%;"
              animationDuration={9}
              class="chip-mobile chip-bottom-left"
            />
          )}
          {brand.imageChip4 && (
            <FloatingChip
              src={brand.imageChip4}
              alt="Chip"
              size="xl"
              position="bottom: 10%; right: 10%;"
              animationDuration={11}
              class="chip-mobile chip-bottom-right"
            />
          )}
          
          <div class="container mx-auto px-4 py-8 relative">
            <div class="flex flex-col md:flex-row items-center justify-between">
              <div id="info-brand" class={`md:w-1/2 order-2 md:order-${index % 2 === 0 ? '1' : '2'} flex items-center justify-center`}>
                <div class="brand-logo-container relative">
                  {/* Desktop chip images positioned around the logo */}
                  {brand.imageChip1 && (
                    <FloatingChip
                      src={brand.imageChip1}
                      alt="Chip"
                      size="2xl"
                      position="top: -5%; left: -5%;"
                      animationDuration={15}
                      class="chip-desktop chip-top-left"
                    />
                  )}
                  {brand.imageChip2 && (
                    <FloatingChip
                      src={brand.imageChip2}
                      alt="Chip"
                      size="xl"
                      position="top: -5%; right: -5%;"
                      animationDuration={17}
                      class="chip-desktop chip-top-right"
                    />
                  )}
                  {brand.imageChip3 && (
                    <FloatingChip
                      src={brand.imageChip3}
                      alt="Chip"
                      size="xl"
                      position="bottom: -5%; left: -5%;"
                      animationDuration={16}
                      class="chip-desktop chip-bottom-left"
                    />
                  )}
                  {brand.imageChip4 && (
                    <FloatingChip
                      src={brand.imageChip4}
                      alt="Chip"
                      size="2xl"
                      position="bottom: -5%; right: -5%;"
                      animationDuration={18}
                      class="chip-desktop chip-bottom-right"
                    />
                  )}
                  
                  <div id="brand-logo" class="flex flex-col items-center z-10 relative ">
                    <LazyImage
                    class="mt-[-6rem] md:mt-0"  
                      src={brand.logo}
                      alt={brand.title}
                      transition:name={`brand-image-${brand.id}`}
                      transition:animate={fade({ duration: '0.5s' })}
                    />
                    {!brand.url || brand.url === '#' ? null : (
                      <a 
                        href={brand.url}
                        class="inline-block bg-white border border-primary text-primary hover:bg-primary hover:text-white py-2 px-6 rounded-full transition-colors duration-300 mt-6"
                      >
                        {homeAssets.textButton}
                      </a>
                    )}
                  </div>
                </div>
              </div>
              
              <div id="product-image-brand" class={`md:w-1/2 order-1 md:order-${index % 2 === 0 ? '2' : '1'} mb-6 md:mb-0 flex items-center justify-center product-preview-container`}>
                <div class="products-carousel" id={`products-carousel-${brand.id}`}>
                  <div class="products-carousel-inner">
                    {brand.products && brand.products.length > 0 ? (
                      brand.products.map((product: any, productIndex: number) => (
                        <div class="product-slide" id={`${brand.id}-product-${productIndex}`} data-valid="true">
                          <LazyImage 
                          id={`product-${brand.id}-${productIndex}`}
                            src={product.image} 
                            alt={product.title} 
                            class="product-preview-image"
                            onload="this.parentNode.dataset.loaded = 'true'"
                            onerror="this.parentNode.dataset.valid = 'false'; this.parentNode.style.display = 'none';"
                          />
                        </div>
                      ))
                    ) : (
                      <div class="product-slide" data-valid="true">
                        <LazyImage 
                          src={brand.imageProductPreview || brand.image} 
                          alt={brand.title} 
                          class="product-preview-image"
                          transition:name={`brand-image-${brand.id}`}
                          transition:animate={fade({ duration: '0.5s' })}
                        />
                      </div>
                    )}
                  </div>
                  {brand.products && brand.products.length > 1 && (
                    <div class="products-carousel-nav">
                      <button class="prev-product" aria-label="Producto anterior">
                        <svg xmlns="http://www.w3.org/2000/svg" class="nav-arrow w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                        </svg>
                      </button>
                      <button class="next-product" aria-label="Siguiente producto">
                        <svg xmlns="http://www.w3.org/2000/svg" class="nav-arrow w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                      </button>
                    </div>
                  )}
                  
                  {/* Script para precargar todas las imágenes */}
                  {brand.products && brand.products.length > 0 && (
                    <script define:vars={{ products: brand.products, brandId: brand.id }}>
                      // Función para precargar imágenes
                      function preloadImages() {
                        if (!products || products.length === 0) return;
                        
                        products.forEach((product, index) => {
                          if (!product.image) return;
                          
                          // Crear un elemento Image para precargar
                          const img = new Image();
                          img.onload = function() {
                            console.log(`Precargada imagen ${index} de ${brandId}`);
                          };
                          img.onerror = function() {
                            console.error(`Error al precargar imagen ${index} de ${brandId}`);
                          };
                          img.src = product.image;
                        });
                      }
                      
                      // Ejecutar después de que la página esté cargada
                      if (document.readyState === 'complete') {
                        preloadImages();
                      } else {
                        window.addEventListener('load', preloadImages);
                      }
                    </script>
                  )}
                </div>
              </div>
            </div>
          </div>
          
          <!-- Decorative elements like triangles and chips based on the reference image -->
        </div>
      ))
    )}
  </div> 
</div>
</div>

<script>
  /* @ts-nocheck */
  function initBrandsFilter(){
    console.log('[BRANDS] 🚀 Inicializando filtro de marcas');
    const list = document.querySelector('.brands-list');
    if (!list) {
      console.warn('[BRANDS] ⚠️ No se encontró .brands-list');
      return;
    }
    /** @type {HTMLElement[]} */
    const cards = Array.from(list.querySelectorAll('[data-brand]'));
    console.log('[BRANDS] 📦 Tarjetas encontradas:', cards.length);
    
    // Debug: mostrar los primeros 3 data-brand para verificar valores
    if (cards.length > 0) {
      console.log('[BRANDS] 🔍 Primeros data-brand:', 
        cards.slice(0, 3).map(c => c.getAttribute('data-brand'))
      );
    }
    
    /**
     * @param {string} slug
     */
    function apply(slug){
      console.log('[BRANDS] 🔍 Aplicando filtro:', slug);
      let visibleCount = 0;
      const matches = [];
      cards.forEach((el)=>{
        const b = el.getAttribute('data-brand');
        const match = !slug || slug === 'all' || b === slug;
        if (match) {
          visibleCount++;
          matches.push(b);
          el.style.display = 'flex'; // Restaurar display flex original
        } else {
          el.style.display = 'none'; // Ocultar con display none
        }
      });
      console.log(`[BRANDS] ✅ Filtrado: ${visibleCount} marcas visibles de ${cards.length}`);
      if (slug !== 'all' && visibleCount === 0) {
        console.warn(`[BRANDS] ⚠️ No se encontraron marcas con data-brand="${slug}"`);
        console.log('[BRANDS] 📋 Todas las marcas disponibles:', 
          cards.map(c => c.getAttribute('data-brand'))
        );
      } else if (slug !== 'all') {
        console.log('[BRANDS] ✅ Marcas que coinciden:', matches);
      }
    }
    const u = new URL(window.location.href);
    const urlBrand = u.searchParams.get('brand');
    const sessionBrand = sessionStorage.getItem('selectedBrand');
    const initial = urlBrand || sessionBrand || 'all';
    console.log('[BRANDS] 📍 Marca inicial:', { urlBrand, sessionBrand, initial });
    apply(initial);
    document.addEventListener('brandFilterChange', (ev)=>{
      console.log('[BRANDS] 📡 Evento brandFilterChange recibido:', ev?.detail);
      // @ts-ignore
      const slug = ev?.detail?.brand || 'all';
      try { sessionStorage.setItem('selectedBrand', slug); } catch {}
      apply(slug);
    });
    // Fallback: intercept direct clicks on category pills in case component event is not caught
    document.addEventListener('click', (e)=>{
      const target = e.target;
      // @ts-ignore
      const btn = target?.closest?.('.brand-filter-btn');
      if (!btn) return;
      const slug = btn.getAttribute('data-slug') || 'all';
      console.log('[BRANDS] 🖱️ Click fallback en botón de marca:', slug);
      // only handle if query param is brand
      e.preventDefault();
      const url = new URL(window.location.href);
      url.searchParams.set('brand', slug);
      history.pushState({}, '', url.toString());
      try { sessionStorage.setItem('selectedBrand', slug); } catch {}
      apply(slug);
      const evt = new CustomEvent('brandFilterChange', { detail: { brand: slug }, bubbles: true });
      document.dispatchEvent(evt);
    });
    // Sync with browser navigation
    window.addEventListener('popstate', ()=>{
      const b = new URL(window.location.href).searchParams.get('brand') || 'all';
      apply(b);
    });
  }
  document.addEventListener('DOMContentLoaded', initBrandsFilter);
  window.addEventListener('astro:page-load', initBrandsFilter);
  window.addEventListener('astro:after-swap', initBrandsFilter);
</script>

<!-- Cargar scripts para la funcionalidad de la página -->
<script src="./scripts.js"></script>
