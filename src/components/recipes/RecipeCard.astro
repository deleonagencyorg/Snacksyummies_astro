---
import LazyImage from '../common/LazyImage.astro';
import { getLocale } from '../../i18n/i18n';

interface Props {
  image: string;
  title: string;
  time?: string;
  id: string;
  textColor?: string;
  iconColor?: string;
  servings?: number;
  difficulty?: string;
  slug?: string;
}

const { 
  image, 
  title, 
  time = "---", 
  id,
  textColor = 'text-blue-900',
  iconColor = 'text-blue-900',
  servings = 0,
  difficulty = '',
  slug
} = Astro.props;

const currentLocale = getLocale();

// Función avanzada para corregir problemas de codificación en títulos
function normalizeTitle(input: string): string {
  if (!input) return '';
  
  // Primero normalizamos a NFC para unificar caracteres compuestos
  let text = input.normalize('NFC');
  
  // Método directo para casos específicos
  text = text
    // Vocales minúsculas con acento
    .replace(/Ã¡/g, 'á')
    .replace(/Ã©/g, 'é')
    .replace(/Ã­/g, 'í')
    .replace(/Ã³/g, 'ó')
    .replace(/Ãº/g, 'ú')
    // Vocales mayúsculas con acento
    .replace(/Ã/g, 'Á')
    .replace(/Ã‰/g, 'É')
    .replace(/Ã/g, 'Í')
    .replace(/Ã"/g, 'Ó')
    .replace(/Ãš/g, 'Ú')
    // Ñ y caracteres especiales
    .replace(/Ã±/g, 'ñ')
    .replace(/Ã'/g, 'Ñ')
    .replace(/Â/g, '')
    // Casos específicos observados
    .replace(/manÃ/g, 'maní')
    .replace(/japonÃ©s/g, 'japonés')
    .replace(/PlÃ¡tano/g, 'Plátano')
    .replace(/MaÃ­z/g, 'Maíz')
    .replace(/PÃ¡caros/g, 'Pícaros')
    .replace(/PÃ­caros/g, 'Pícaros')
    .replace(/JalapeÃ±o/g, 'Jalapeño')
    .replace(/ChicharrÃ³n/g, 'Chicharrón')
    .replace(/FusiÃ³n/g, 'Fusión')
    .replace(/ClÃ¡sicas/g, 'Clásicas')
    .replace(/Ã³n/g, 'ón');
  
  // Intento de decodificación UTF-8 si aún detectamos patrones de mojibake
  if (/Ã|Â/.test(text)) {
    try {
      // Reinterpreta como UTF-8 bytes
      const bytes = new Uint8Array(Array.from(text).map(c => c.charCodeAt(0) & 0xff));
      const decoded = new TextDecoder('utf-8').decode(bytes);
      if (decoded && !/Ã|Â/.test(decoded)) {
        text = decoded;
      }
    } catch (e) {
      // Si falla, mantenemos el texto con los reemplazos ya aplicados
    }
  }
  
  // Limpieza final de espacios y caracteres invisibles
  text = text.replace(/[\u00A0\u200B\u200C\u200D]/g, ' ').trim();
  
  // Normalizar nuevamente para asegurar consistencia
  return text.normalize('NFC');
}

const safeTitle = normalizeTitle(String(title || ''));
const titleSlug = String(title || '')
  .toLowerCase()
  .normalize('NFD')
  .replace(/[\u0300-\u036f]/g, '')
  .replace(/[^a-z0-9]+/g, '-')
  .replace(/^-+|-+$/g, '');
const recipeLink = `/${currentLocale}/${currentLocale === 'es' ? 'recetas' : 'recipes'}/${slug ?? titleSlug ?? id}`;
const viewRecipeText = currentLocale === 'es' ? 'Ver Receta' : 'View Recipe';
---

<div class="flex flex-col items-start justify-start w-full sm:w-[19.75rem] h-[24rem] md:h-[28.75rem] group">
  <div class="bg-white rounded-[40px] overflow-hidden shadow-sm hover:shadow-lg transition-all duration-300 w-full h-full flex flex-col relative">
    <a href={recipeLink} class="h-full flex flex-col relative">
      <!-- Default State Layout (mobile always, desktop when not hovering) -->
      <div class="md:group-hover:hidden w-full h-full flex flex-col justify-between md:justify-start">
        <!-- Recipe Image (Square aspect ratio) -->
        <div class="aspect-square w-full overflow-hidden rounded-t-[40px]">
          <LazyImage
            src={image}
            alt={safeTitle}
            class="w-full h-full object-cover transition-transform duration-300"
            transition:name={`recipe-image-${id}`}
          />
        </div>
        
        <!-- Content Area -->
        <div class="flex flex-col gap-4 items-center justify-center h-full p-3 md:p-4 w-full">
          <!-- Recipe Title -->
          <div class="flex flex-col gap-1 items-start justify-center w-full">
            <h3 class="text-[#00306F] font-title text-lg leading-5 w-full title-clamp">
              {safeTitle}
            </h3>
          </div>
          
          <!-- CTA Button -->
          <div class="flex flex-col gap-2 items-center justify-center w-full">
            <div class="bg-white h-12 rounded-full w-full border border-[#2E5DAB]">
              <div class="flex gap-2 h-12 items-center justify-center px-6 py-3">
                <span class="text-[#2E5DAB] text-base font-medium leading-4">
                  {viewRecipeText}
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- Hover State Layout (enable only on md+ to avoid mobile hover issues) -->
      <div class="hidden md:group-hover:block w-full h-full relative overflow-hidden rounded-[40px]">
        <LazyImage
          src={image}
          alt={safeTitle}
          class="w-full h-full object-cover transition-transform duration-300"
          transition:name={`recipe-image-${id}`}
        />

        <!-- Dark overlay for hover state -->
        <div class="absolute inset-0 bg-black bg-opacity-40 transition-all duration-300 rounded-[40px]"></div>
        
        <!-- Hover Content (visible when hovering) -->
        <div class="absolute inset-0 flex flex-col justify-end p-4 transition-all duration-300">
          <!-- Recipe Details -->
          <div class="flex flex-col gap-4 text-white">
            <!-- Recipe Title -->
            <h3 class="font-title text-lg leading-5 text-white">
              {safeTitle}
            </h3>
              
              <!-- Rating Stars -->
                <div class="flex gap-1">
                  <svg class="w-[18px] h-[18px] text-yellow-400" viewBox="0 0 18 18" fill="currentColor">
                    <path d="M9 1.5l2.25 4.5 4.95.75-3.6 3.6.85 4.95L9 13.05l-4.45 2.25.85-4.95-3.6-3.6 4.95-.75L9 1.5z"/>
                  </svg>
                  <svg class="w-[18px] h-[18px] text-yellow-400" viewBox="0 0 18 18" fill="currentColor">
                    <path d="M9 1.5l2.25 4.5 4.95.75-3.6 3.6.85 4.95L9 13.05l-4.45 2.25.85-4.95-3.6-3.6 4.95-.75L9 1.5z"/>
                  </svg>
                  <svg class="w-[18px] h-[18px] text-yellow-400" viewBox="0 0 18 18" fill="currentColor">
                    <path d="M9 1.5l2.25 4.5 4.95.75-3.6 3.6.85 4.95L9 13.05l-4.45 2.25.85-4.95-3.6-3.6 4.95-.75L9 1.5z"/>
                  </svg>
                  <svg class="w-[18px] h-[18px] text-yellow-400" viewBox="0 0 18 18" fill="currentColor">
                    <path d="M9 1.5l2.25 4.5 4.95.75-3.6 3.6.85 4.95L9 13.05l-4.45 2.25.85-4.95-3.6-3.6 4.95-.75L9 1.5z"/>
                  </svg>
                  <svg class="w-[18px] h-[18px] text-yellow-400" viewBox="0 0 18 18" fill="currentColor">
                    <defs>
                      <clipPath id="halfStar">
                        <rect x="0" y="0" width="50%" height="100%"/>
                      </clipPath>
                    </defs>
                    <path d="M9 1.5l2.25 4.5 4.95.75-3.6 3.6.85 4.95L9 13.05l-4.45 2.25.85-4.95-3.6-3.6 4.95-.75L9 1.5z" clip-path="url(#halfStar)"/>
                  </svg>
                </div>
              </div>
            </div>
            
            <!-- Recipe Details Row -->
            <div class="flex flex-wrap gap-4 items-center">
              <!-- Time -->
              <div class="flex gap-1 items-center">
                <svg class="w-4 h-4 text-white" viewBox="0 0 16 16" fill="currentColor">
                  <path d="M8 1.25a6.75 6.75 0 1 0 0 13.5 6.75 6.75 0 0 0 0-13.5zM8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0z"/>
                  <path d="M8 3.5a.5.5 0 0 1 .5.5v4l2.5 1.5a.5.5 0 0 1-.5.866L7.5 8.5V4a.5.5 0 0 1 .5-.5z"/>
                </svg>
                <span class="text-base text-white font-normal leading-5">{time}</span>
              </div>
              
              <!-- Servings (optional) -->
              {servings > 0 && (
                <div class="flex gap-1 items-center">
                  <svg class="w-4 h-4 text-white" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"/>
                  </svg>
                  <span class="text-base text-white font-normal leading-5">{`${servings} ${currentLocale === 'es' ? 'Personas' : 'Servings'}`}</span>
                </div>
              )}
              
              <!-- Level (optional) -->
              {Boolean(difficulty) && (
                <div class="flex gap-1 items-center">
                  <svg class="w-4 h-4 text-white" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M11.5 2a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zM9.05 3a2.5 2.5 0 0 1 4.9 0H16v1h-2.05a2.5 2.5 0 0 1-4.9 0H0V3h9.05zM4.5 7a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zM2.05 8a2.5 2.5 0 0 1 4.9 0H16v1H6.95a2.5 2.5 0 0 1-4.9 0H0V8h2.05zm9.45 4a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zm-2.45 1a2.5 2.5 0 0 1 4.9 0H16v1h-2.05a2.5 2.5 0 0 1-4.9 0H0v-1h9.05z"/>
                  </svg>
                  <span class="text-base text-white font-normal leading-5">{difficulty}</span>
                </div>
              )}
            </div>
            
            <!-- CTA Button -->
            <div class="flex flex-col gap-2 items-center justify-center w-full pt-2">
              <div class="bg-white h-12 rounded-full w-full border border-[#2E5DAB]">
                <div class="flex gap-2 h-12 items-center justify-center px-6 py-3">
                  <span class="text-[#2E5DAB] text-base font-medium leading-4 text-center">
                    {viewRecipeText}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </a>
  </div>
</div>

<style>
  /* Clamp title to 3 lines to keep consistent layout heights */
  .title-clamp{
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
