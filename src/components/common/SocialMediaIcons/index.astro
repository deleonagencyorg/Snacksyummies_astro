---
import LazyImage from '../LazyImage.astro';
import { t, type Locale } from '../../../i18n/i18n';

export interface SocialMedia {
  name: string;
  url: string;
  alt: string;
  iconUrl: string;
}

export interface Props {
  currentLang: Locale;
  iconColor?: string;
  iconSize?: number; // New prop for icon size
  centered?: boolean;
  class?: string;
}

const { currentLang, iconColor = "white", iconSize = 24, centered = false, class: className = '' } = Astro.props;

// Determinar las clases de alineación basadas en la propiedad centered
const alignmentClasses = centered 
  ? 'mx-auto justify-center' 
  : 'md:mx-0 md:justify-start';

// Obtener los datos de social media (url y alt) desde los archivos de traducción
const socialMediaObj = t('social_media', { namespace: 'common', locale: currentLang });
// Convertir el objeto de redes sociales en un array para poder iterarlo
const socialMedia = socialMediaObj ? Object.values(socialMediaObj) as SocialMedia[] : [];
---

<div class={`flex flex-row space-x-4 ${alignmentClasses} ${className}`}>
  {socialMedia.map((sm: SocialMedia) => (
    <a 
      href={sm.url} 
      target="_blank" 
      rel="noopener noreferrer" 
      title={sm.name} 
      class={`hover:text-gray-300 transition-colors`}
    >
      <span class="sr-only">{sm.name}</span>
      {sm.iconUrl && (
        (() => {
          const isSvg = sm.iconUrl.toLowerCase().endsWith('.svg');
          const displaySize = iconSize;
          const intrinsicSize = isSvg ? iconSize : iconSize * 2; // 2x for raster for retina crispness
          return (
            <LazyImage
              src={sm.iconUrl}
              alt={sm.alt || sm.name}
              style={`height: ${displaySize}px; width: ${displaySize}px;`}
              color={iconColor}
              width={intrinsicSize}
              height={intrinsicSize}
              sizes={`${displaySize}px`}
              loading="lazy"
            />
          );
        })()
      )}
    </a>
  ))}
</div>
