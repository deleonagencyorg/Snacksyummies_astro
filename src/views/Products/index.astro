---
// src/components/pages/ProductsPage.astro
import { t } from '../../i18n/i18n';
import type { Locale } from '../../i18n/i18n';
import { getLocale } from '../../i18n/i18n';
import './styles.css';
import Categories from '../../components/recipes/Categories.astro';
import ProductCard from '../../components/products/ProductCard.astro';
import Breadcrumb from '../../components/common/Breadcrumb/Breadcrumb.astro';
import DeliveryAppsCarousel from '../../components/common/DeliveryAppsCarousel.astro';

const currentLang = getLocale();

// Obtener las marcas desde los archivos de localizaci√≥n
interface Brand {
  id: string;
  title?: string;
  logo?: string;
  bgColor?: string;
  products?: Array<{
    id: string;
    slug?: string;
    title: string;
    image: string;
    imageMobile?: string;
  }>;
}

const brandsData = t('brands', { namespace: 'brands', locale: currentLang }) as Brand[] || [];

// Funci√≥n para normalizar t√≠tulos con acentos
function normalizeTitle(input: string): string {
  if (!input) return '';

  // Primero normalizamos a NFC para unificar caracteres compuestos
  let text = input.normalize('NFC');

  // M√©todo directo para casos espec√≠ficos
  text = text
    // Vocales min√∫sculas con acento
    .replace(/√É¬°/g, '√°')
    .replace(/√É¬©/g, '√©')
    .replace(/√É¬≠/g, '√≠')
    .replace(/√É¬≥/g, '√≥')
    .replace(/√É¬∫/g, '√∫')
    // Vocales may√∫sculas con acento
    .replace(/√É/g, '√Å')
    .replace(/√É‚Ä∞/g, '√â')
    .replace(/√É/g, '√ç')
    .replace(/√É"/g, '√ì')
    .replace(/√É≈°/g, '√ö')
    // √ë y caracteres especiales
    .replace(/√É¬±/g, '√±')
    .replace(/√É'/g, '√ë')
    .replace(/√Ç/g, '')
    // Casos espec√≠ficos observados
    .replace(/man√É/g, 'man√≠')
    .replace(/japon√É¬©s/g, 'japon√©s')
    .replace(/Pl√É¬°tano/g, 'Pl√°tano')
    .replace(/Ma√É¬≠z/g, 'Ma√≠z')
    .replace(/P√É¬°caros/g, 'P√≠caros')
    .replace(/P√É¬≠caros/g, 'P√≠caros')
    .replace(/Jalape√É¬±o/g, 'Jalape√±o')
    .replace(/Chicharr√É¬≥n/g, 'Chicharr√≥n')
    .replace(/Fusi√É¬≥n/g, 'Fusi√≥n')
    .replace(/Cl√É¬°sicas/g, 'Cl√°sicas')
    .replace(/√É¬≥n/g, '√≥n');

  // Limpieza final de espacios y caracteres invisibles
  text = text.replace(/[\u00A0\u200B\u200C\u200D]/g, ' ').trim();

  // Normalizar nuevamente para asegurar consistencia
  return text.normalize('NFC');
}

// Definir la interfaz para los productos
interface Product {
  id: string;
  slug?: string;
  title: string;
  image: string;
  imageMobile?: string;
  brand?: string;
  brandId?: string;
}

// Extraer todos los productos de todas las marcas
const allProducts: Product[] = [];
for (const brand of brandsData) {
  if (brand.products && Array.isArray(brand.products)) {
    for (const product of brand.products) {
      // Crear una copia del producto para no modificar el original
      const productCopy: Product = { ...(product as any) } as Product;
      
      // Normalizar el t√≠tulo
      if (productCopy.title) {
        productCopy.title = normalizeTitle(productCopy.title);
      }
      // Agregar la marca al producto (tambi√©n normalizada)
      productCopy.brand = normalizeTitle(brand.title || brand.id);
      productCopy.brandId = brand.id;
      allProducts.push(productCopy);
    }
  }
}

// Crear las categor√≠as para el filtro (basadas en las marcas)
const categoryItems = brandsData.map((brand: Brand) => ({
  label: normalizeTitle(brand.title || brand.id),
  slug: brand.id,
  logo: brand.logo,
  bgColor: brand.bgColor || '#E5E7EB'
}));

// Pasar el idioma actual al script del cliente
const clientLang = currentLang;
---

<div class="" style="background-image: url('https://snack.yummiespromociones.com/SnacksyummiesAssets/bgproducts2.jpg'); background-size: conver; background-position: center; background-repeat: no-repeat; background-color: transparent;">
  <!-- Hero Banner con fondo primary -->
  <div class="py-2">
  <!-- Hero Banner -->

  <!-- Breadcrumbs -->
  <div class="container mx-auto px-4 bg-transparent">
    <Breadcrumb 
      items={[
        { label: 'Home', href: `/${currentLang}` },
        { label: currentLang === 'es' ? 'Productos' : 'Products', href: `/${currentLang}/${currentLang === 'es' ? 'productos' : 'products'}` },
      ]}
      textColor="text-primary"
    />

    <!-- Categories Section (reusable slider) -->
     <div class="w-full mx-auto px-4  bg-transparent">
      <Categories 
      title={currentLang === 'es' ? 'Productos por marca' : 'Products by brand'}
      items={categoryItems}
      allLabel={currentLang === 'es' ? 'TODAS' : 'ALL'}
      queryKey="brand"
      baseHref={`/${currentLang}/${currentLang === 'es' ? 'productos' : 'products'}`}
      showArrows={true}
      hideTitle={true}
    />
     </div>

  </div>
</div>

<!-- Secci√≥n de productos con fondo blanco -->
<div class="md:py-8 py-4 -mt-[8rem]">

    {allProducts.length === 0 ? (
      <p class="text-center text-primary">{currentLang === 'es' ? 'No hay productos disponibles' : 'No products available'}</p>
    ) : (
      <div class="container mx-auto flex flex-col gap-14 items-center ">
        <!-- Title -->
       
        
        <!-- Products Grid -->
        <div class="w-full">
          <div id="products-grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 md:gap-6 place-items-center">
            {allProducts.map((product: Product) => (
              <div 
                data-brand={product.brandId || 'unknown'}
                class="product-item w-full"
              >
                <ProductCard
                  image={product.image || 'https://snack.yummiespromociones.com/SnacksyummiesAssets/placeholder.webp'}
                  title={product.title}
                  id={product.id}
                  slug={product.slug}
                  textColor="text-primary"
                />
              </div>
            ))}
          
          </div>
        </div>
      </div>
    )}
</div>

{currentLang === 'es' && (
  <DeliveryAppsCarousel />
)}

<script define:vars={{ clientLang }}>
  function applyBrandFilter(brand) {
    console.log('[PRODUCTS] üîç Aplicando filtro de marca:', brand);
    const productItems = document.querySelectorAll('.product-item');
    console.log('[PRODUCTS] üì¶ Items encontrados:', productItems.length);
    
    if (!productItems || productItems.length === 0) {
      console.warn('[PRODUCTS] ‚ö†Ô∏è No se encontraron items para filtrar');
      return;
    }

    if (brand === 'all') {
      console.log('[PRODUCTS] ‚úÖ Mostrando todos los productos');
      productItems.forEach((item) => {
        item.style.display = '';
      });
    } else {
      let visibleCount = 0;
      productItems.forEach((item) => {
        const itemBrand = item.getAttribute('data-brand');
        const match = itemBrand === brand;
        if (match) {
          visibleCount++;
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
      console.log(`[PRODUCTS] ‚úÖ Filtrado por "${brand}": ${visibleCount} productos visibles de ${productItems.length}`);
      if (visibleCount === 0) {
        console.warn(`[PRODUCTS] ‚ö†Ô∏è No se encontraron productos con data-brand="${brand}"`);
        console.log('[PRODUCTS] üìã Primeros 5 data-brand:', 
          Array.from(productItems).slice(0, 5).map(p => p.getAttribute('data-brand'))
        );
      }
    }
  }

  function initializeProductsPage() {
    console.log('[PRODUCTS] üöÄ Inicializando p√°gina de productos');
    // Inicializar filtro desde la URL si existe ?brand=
    const urlBrand = new URL(window.location.href).searchParams.get('brand');
    const sessionBrand = sessionStorage.getItem('selectedBrand');
    const initialBrand = urlBrand || sessionBrand || 'all';
    console.log('[PRODUCTS] üìç Marca inicial:', { urlBrand, sessionBrand, initialBrand });
    applyBrandFilter(initialBrand);

    // Mantener sincron√≠a con navegaci√≥n del navegador
    window.addEventListener('popstate', () => {
      const b = new URL(window.location.href).searchParams.get('brand') || 'all';
      applyBrandFilter(b);
    });

    // Fix para las im√°genes que no cargan
    const images = document.querySelectorAll('img');
    images.forEach((img) => {
      img.addEventListener('error', function () {
        this.src = 'https://snack.yummiespromociones.com/SnacksyummiesAssets/placeholder.webp';
      });
    });
  }

  // Escuchar cambios del filtro desde Categories
  document.addEventListener('brandFilterChange', (event) => {
    console.log('[PRODUCTS] üì° Evento brandFilterChange recibido:', event.detail);
    const brand = event.detail.brand;
    try { sessionStorage.setItem('selectedBrand', brand); } catch {}
    applyBrandFilter(brand);
  });

  // Fallback: intercept clicks on category pills if event isn't caught
  document.addEventListener('click', (e) => {
    const target = e.target;
    const btn = (target && target.closest) ? target.closest('.brand-filter-btn') : null;
    if (!btn) return;
    const slug = btn.getAttribute('data-slug') || 'all';
    console.log('[PRODUCTS] üñ±Ô∏è Click fallback en bot√≥n de marca:', slug);
    e.preventDefault();
    const u = new URL(window.location.href);
    u.searchParams.set('brand', slug);
    history.pushState({}, '', u.toString());
    try { sessionStorage.setItem('selectedBrand', slug); } catch {}
    applyBrandFilter(slug);
    const event = new CustomEvent('brandFilterChange', { detail: { brand: slug } });
    document.dispatchEvent(event);
  });

  // Inicializar en carga inicial y navegaciones de Astro
  document.addEventListener('DOMContentLoaded', initializeProductsPage);
  window.addEventListener('astro:page-load', initializeProductsPage);
  window.addEventListener('astro:after-swap', initializeProductsPage);