---
// src/components/pages/ProductsPage.astro
import { t } from '../../i18n/i18n';
import type { Locale } from '../../i18n/i18n';
import { getLocale } from '../../i18n/i18n';
import './styles.css';
import Categories from '../../components/recipes/Categories.astro';
import ProductCard from '../../components/products/ProductCard.astro';
import Breadcrumb from '../../components/common/Breadcrumb/Breadcrumb.astro';
import DeliveryAppsCarousel from '../../components/common/DeliveryAppsCarousel.astro';

const currentLang = getLocale();

// Obtener las marcas desde los archivos de localización
interface Brand {
  id: string;
  title?: string;
  logo?: string;
  bgColor?: string;
  products?: Array<{
    id: string;
    slug?: string;
    title: string;
    image: string;
    imageMobile?: string;
  }>;
}

const brandsData = t('brands', { namespace: 'brands', locale: currentLang }) as Brand[] || [];

// Función para normalizar títulos con acentos
function normalizeTitle(input: string): string {
  if (!input) return '';

  // Primero normalizamos a NFC para unificar caracteres compuestos
  let text = input.normalize('NFC');

  // Método directo para casos específicos
  text = text
    // Vocales minúsculas con acento
    .replace(/Ã¡/g, 'á')
    .replace(/Ã©/g, 'é')
    .replace(/Ã­/g, 'í')
    .replace(/Ã³/g, 'ó')
    .replace(/Ãº/g, 'ú')
    // Vocales mayúsculas con acento
    .replace(/Ã/g, 'Á')
    .replace(/Ã‰/g, 'É')
    .replace(/Ã/g, 'Í')
    .replace(/Ã"/g, 'Ó')
    .replace(/Ãš/g, 'Ú')
    // Ñ y caracteres especiales
    .replace(/Ã±/g, 'ñ')
    .replace(/Ã'/g, 'Ñ')
    .replace(/Â/g, '')
    // Casos específicos observados
    .replace(/manÃ/g, 'maní')
    .replace(/japonÃ©s/g, 'japonés')
    .replace(/PlÃ¡tano/g, 'Plátano')
    .replace(/MaÃ­z/g, 'Maíz')
    .replace(/PÃ¡caros/g, 'Pícaros')
    .replace(/PÃ­caros/g, 'Pícaros')
    .replace(/JalapeÃ±o/g, 'Jalapeño')
    .replace(/ChicharrÃ³n/g, 'Chicharrón')
    .replace(/FusiÃ³n/g, 'Fusión')
    .replace(/ClÃ¡sicas/g, 'Clásicas')
    .replace(/Ã³n/g, 'ón');

  // Limpieza final de espacios y caracteres invisibles
  text = text.replace(/[\u00A0\u200B\u200C\u200D]/g, ' ').trim();

  // Normalizar nuevamente para asegurar consistencia
  return text.normalize('NFC');
}

// Definir la interfaz para los productos
interface Product {
  id: string;
  slug?: string;
  title: string;
  image: string;
  imageMobile?: string;
  brand?: string;
  brandId?: string;
}

// Extraer todos los productos de todas las marcas
const allProducts: Product[] = [];
for (const brand of brandsData) {
  if (brand.products && Array.isArray(brand.products)) {
    for (const product of brand.products) {
      // Crear una copia del producto para no modificar el original
      const productCopy: Product = { ...(product as any) } as Product;
      
      // Normalizar el título
      if (productCopy.title) {
        productCopy.title = normalizeTitle(productCopy.title);
      }
      // Agregar la marca al producto (también normalizada)
      productCopy.brand = normalizeTitle(brand.title || brand.id);
      productCopy.brandId = brand.id;
      allProducts.push(productCopy);
    }
  }
}

// Crear las categorías para el filtro (basadas en las marcas)
const categoryItems = brandsData.map((brand: Brand) => ({
  label: normalizeTitle(brand.title || brand.id),
  slug: brand.id,
  logo: brand.logo,
  bgColor: brand.bgColor || '#E5E7EB'
}));

// Pasar el idioma actual al script del cliente
const clientLang = currentLang;
---

<div class="" style="background-image: url('https://snack.yummiespromociones.com/SnacksyummiesAssets/bgproducts2.jpg'); background-size: conver; background-position: center; background-repeat: no-repeat; background-color: transparent;">
  <!-- Hero Banner con fondo primary -->
  <div class="py-2">
  <!-- Hero Banner -->

  <!-- Breadcrumbs -->
  <div class="container mx-auto px-4 bg-transparent">
    <Breadcrumb 
      items={[
        { label: 'Home', href: `/${currentLang}` },
        { label: currentLang === 'es' ? 'Productos' : 'Products', href: `/${currentLang}/${currentLang === 'es' ? 'productos' : 'products'}` },
      ]}
      textColor="text-primary"
    />

    <!-- Categories Section (reusable slider) -->
     <div class="w-full mx-auto px-4  bg-transparent">
      <Categories 
      title={currentLang === 'es' ? 'Productos por marca' : 'Products by brand'}
      items={categoryItems}
      allLabel={currentLang === 'es' ? 'TODAS' : 'ALL'}
      queryKey="brand"
      baseHref={`/${currentLang}/${currentLang === 'es' ? 'productos' : 'products'}`}
      showArrows={true}
      hideTitle={true}
    />
     </div>

  </div>
</div>

<!-- Sección de productos con fondo blanco -->
<div class="md:py-8 py-4 -mt-[8rem]">

    {allProducts.length === 0 ? (
      <p class="text-center text-primary">{currentLang === 'es' ? 'No hay productos disponibles' : 'No products available'}</p>
    ) : (
      <div class="container mx-auto flex flex-col gap-14 items-center ">
        <!-- Title -->
       
        
        <!-- Products Grid -->
        <div class="w-full">
          <div id="products-grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 md:gap-6 place-items-center">
            {allProducts.map((product: Product) => (
              <div 
                data-brand={product.brandId || 'unknown'}
                class="product-item w-full"
              >
                <ProductCard
                  image={product.image || 'https://snack.yummiespromociones.com/SnacksyummiesAssets/placeholder.webp'}
                  title={product.title}
                  id={product.id}
                  slug={product.slug}
                  textColor="text-primary"
                />
              </div>
            ))}
          
          </div>
        </div>
      </div>
    )}
</div>

{currentLang === 'es' && (
  <DeliveryAppsCarousel />
)}

<script>
  import { initProductsFilter } from '../../scripts/productsFilter';

  // Inicializar en carga y navegaciones
  function init() {
    initProductsFilter();
  }

  // Ejecutar en diferentes eventos del ciclo de vida
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
  
  window.addEventListener('astro:page-load', init);
  window.addEventListener('astro:after-swap', init);