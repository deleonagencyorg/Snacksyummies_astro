---
export interface Props {
  width?: string;
  height?: string;
  borderRadius?: string;
  className?: string;
  animation?: 'shimmer' | 'pulse' | 'wave';
}

const { 
  width = '100%', 
  height = '100%', 
  borderRadius = '0.5rem',
  className = '',
  animation = 'shimmer'
} = Astro.props;
---

<div 
  class:list={[
    'skeleton-loader', 
    `skeleton-${animation}`,
    className
  ]}
  style={`
    width: ${width}; 
    height: ${height}; 
    border-radius: ${borderRadius};
  `}
>
  <div class="skeleton-content"></div>
</div>

<style>
  .skeleton-loader {
    position: relative;
    overflow: hidden;
    background-color: rgba(255, 255, 255, 0.1);
  }

  .skeleton-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  /* Shimmer animation */
  .skeleton-shimmer .skeleton-content {
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.15) 50%,
      rgba(255, 255, 255, 0) 100%
    );
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
  }

  /* Pulse animation */
  .skeleton-pulse {
    animation: pulse 1.5s infinite;
  }

  @keyframes pulse {
    0% { opacity: 0.6; }
    50% { opacity: 0.8; }
    100% { opacity: 0.6; }
  }

  /* Wave animation */
  .skeleton-wave .skeleton-content {
    background: linear-gradient(
      to right,
      transparent 0%,
      rgba(255, 255, 255, 0.15) 50%,
      transparent 100%
    );
    transform: translateX(-100%);
    animation: wave 1.5s infinite;
  }

  @keyframes wave {
    0% { transform: translateX(-100%); }
    50%, 100% { transform: translateX(100%); }
  }
</style>
