---
// src/components/Header.astro
import { t, type Locale } from '../../../i18n/i18n';
import { logos} from '../../../config/assets';
import LocalizedImage from '../LazyImage.astro';
import LanguageSwitcher from '../../i18n/LanguageSwitcher.astro';
import './styles.css';

// Importar script sin exportación
export const prerender = true;


export interface Props {
  currentLang: Locale;
}
const { currentLang } = Astro.props;

// Obtener los datos de social media (url y alt) desde los archivos de traducción
const socialMedia = t('social_media', { namespace: 'common', locale: currentLang });

interface MenuItem {
  id: string;
  text: string;
  href: string;
  submenu?: MenuItem[];
}

const itemsFromT = t('menu_items', { namespace: 'common', locale: currentLang });
const menuItems: MenuItem[] = Array.isArray(itemsFromT) ? itemsFromT : [];
const openMenuLabel: string = t('menu_labels.open_main_menu', { namespace: 'common', locale: currentLang }) || 'Open main menu';

const menuIconSvg = `
  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
  </svg>
`;
const closeIconSvg = `
  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
  </svg>
`;
const closeMenuLabel: string = t('menu_labels.close_main_menu', { namespace: 'common', locale: currentLang }) || 'Close main menu';
---

<header id="site-header" class="fixed top-0 left-0 w-full z-40 transition-colors duration-300 bg-transparent text-white py-3 px-4 sm:px-6 lg:px-8 font-sans">
  <div class="container mx-auto flex items-center justify-between h-16">
    
    <!-- Logo para Desktop (Izquierda) -->
    <div class="hidden md:flex items-center flex-shrink-0 pt-6">
      <a href={`/${currentLang}/`} class="block">
        <img src={logos.principal.url} alt={logos.principal.alt || 'Taqueritos Logo'} class="h-10 lg:h-20 w-auto" />
      </a>
    </div>

    <!-- Menú Hamburguesa (Izquierda en Móvil) -->
    <div class="md:hidden flex items-center">
      <button id="mobile-menu-button" type="button" class="md:hidden text-white" aria-controls="mobile-menu" aria-expanded="false">
        <span class="sr-only">{openMenuLabel}</span>
        <div id="menu-icon-container" set:html={menuIconSvg} />
      </button>
    </div>

    <!-- Logo para Móvil (Derecha en Móvil) -->
    <div class="md:hidden flex items-center">
      <a href={`/${currentLang}/`} class="block">
        <img src={logos.principal.url} alt={logos.principal.alt || 'Taqueritos Logo'} class="h-10 w-auto" />
      </a>
    </div>
    <!-- Desktop Right Aligned Content: Socials on top, Nav/Lang below, all right-aligned -->
    <div class="hidden md:flex flex-col items-end space-y-2 py-1">
      {/* Social Media Row */}
      <div class="flex items-center space-x-3">
        {Object.entries(socialMedia).map(([key, social]) => (
          <a href={social.url} target="_blank" rel="noopener noreferrer" title={social.name} class="text-white hover:text-gray-300">
            <span class="sr-only">{social.name}</span>
            {social.iconUrl && (
              <img
                src={social.iconUrl}
                alt={social.alt || social.name}
                class="h-5 w-5 filter invert"
                width={20}
                height={20}
                loading="lazy"
              />
            )}
          </a>
        ))}
      </div>

      {/* Navigation and Language Switcher Row */}
      <div class="flex items-center">
        <nav class="flex items-center space-x-1 lg:space-x-2">
          {menuItems.map(item => (
            <div class="relative group">
              <a href={item.href} class="text-sm font-sans font-medium hover:text-gray-300 transition-colors px-3 py-2 flex items-center">
                {item.text}
                {item.submenu && (
                  <svg class="w-4 h-4 ml-1 fill-current" viewBox="0 0 20 20"><path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" /></svg>
                )}
              </a>
              {item.submenu && (
                <div class="absolute left-0 mt-0 w-48 bg-white text-gray-800 rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 ease-in-out invisible group-hover:visible z-50 py-1">
                  {item.submenu.map(subItem => (
                    <a href={subItem.href} class="block px-4 py-2 text-sm font-sans hover:bg-gray-100">{subItem.text}</a>
                  ))}
                </div>
              )}
            </div>
          ))}
        </nav>
  
        <div class="flex items-center ml-4">
          <LanguageSwitcher activeLocale={currentLang} />
        </div>
      </div>
    </div>

  </div>

  <!-- Menú Móvil -->
  <div id="mobile-menu" class="hidden md:hidden fixed inset-0 bg-black bg-opacity-90 z-50 overflow-y-auto">
    <div class="container mx-auto px-4 py-8">
      <div class="flex justify-between items-center mb-8">
        <a href={`/${currentLang}/`} class="block">
          <img src={logos.principal.url} alt={logos.principal.alt || 'Taqueritos Logo'} class="h-10 w-auto" />
        </a>
        <button id="mobile-menu-close" type="button" class="text-white">
          <span class="sr-only">{closeMenuLabel}</span>
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <nav class="flex flex-col items-center space-y-3 text-center w-full">
        {menuItems.map(item => (
          <div class="w-full">
            <a href={item.href} class="block text-xl font-sans font-medium hover:text-gray-300 transition-colors py-2">
              {item.text}
            </a>
            {item.submenu && (
              <div class="mt-1 space-y-1 pl-4">
                {item.submenu.map(subItem => (
                  <a href={subItem.href} class="block text-lg font-sans font-normal text-gray-400 hover:text-gray-200 transition-colors py-1">{subItem.text}</a>
                ))}
              </div>
            )}
          </div>
        ))}
      </nav>

      <!-- Selector de Idioma Móvil -->
      <div class="mt-6 mb-6 flex justify-center">
        <LanguageSwitcher activeLocale={currentLang} />
      </div>

      <div class="mt-auto flex space-x-4">
        {Object.entries(socialMedia).map(([key, social]) => {
          const sm = social as { name: string; url: string; alt?: string; iconUrl?: string };
          return (
            <a href={sm.url} target="_blank" rel="noopener noreferrer" title={sm.name} class="text-white hover:text-gray-300">
              <span class="sr-only">{sm.name}</span>
              {sm.iconUrl && (
                <LocalizedImage
                  assetKey={sm.iconUrl}
                  alt={sm.alt || sm.name}
                  class="h-6 w-6 filter invert"
                  width={24}
                  height={24}
                  loading="lazy"
                />
              )}
            </a>
          );
        })}
      </div>
    </div>
  </div>
</header>

<script define:vars={{ astroMenuIconSvg: menuIconSvg, astroCloseIconSvg: closeIconSvg }}>
function initMobileMenu() {
  const menuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuIconContainer = document.getElementById('menu-icon-container');
  const mobileMenuClose = document.getElementById('mobile-menu-close');

  if (!menuButton || !mobileMenu || !menuIconContainer || !mobileMenuClose) {
    console.error('Header: Mobile menu DOM elements not all found. Menu will not function.');
    return;
  }

  // Initialize isMenuOpen based on whether 'hidden' class is present
  let isMenuOpen = !mobileMenu.classList.contains('hidden');

  function toggleMenu() {
    isMenuOpen = !isMenuOpen;
    mobileMenu.classList.toggle('hidden');
    menuButton.setAttribute('aria-expanded', String(isMenuOpen));
    
    if (isMenuOpen) {
      menuIconContainer.innerHTML = astroCloseIconSvg; // Use passed variable
      document.body.style.overflow = 'hidden';
    } else {
      menuIconContainer.innerHTML = astroMenuIconSvg; // Use passed variable
      document.body.style.overflow = '';
    }
  }

  menuButton.addEventListener('click', toggleMenu);
  mobileMenuClose.addEventListener('click', toggleMenu);

  // Close menu when a link inside it is clicked
  mobileMenu.querySelectorAll('a').forEach(link => {
    link.addEventListener('click', () => {
      if (isMenuOpen) {
        toggleMenu(); // Call toggleMenu to ensure state and UI are consistent
      }
    });
  });
}

// Ensure the script runs after the DOM is fully loaded
if (typeof window !== 'undefined') {
  if (document.readyState === 'loading') { // Still loading
    document.addEventListener('DOMContentLoaded', initMobileMenu);
  } else { // `DOMContentLoaded` has already fired
    initMobileMenu();
  }
}
</script>
