---
// Delivery Section Component
// Componente at√≥mico para la secci√≥n de delivery con detecci√≥n de pa√≠s

export interface Props {
  deliveryTitle: string;
  deliverySubTitle: string;
  deliveryApps: Array<{
    app_icon: string;
    app_name: string;
    app_url: string;
    country: string;
  }>;
}

const { deliveryTitle, deliverySubTitle, deliveryApps } = Astro.props;
---

<section id="delivery" class="w-full py-12 flex flex-col items-center justify-center relative overflow-hidden" style="background-color: #008ddd;">
  <!-- Ondas de sonar -->
  <div class="sonar-wave sonar-wave-1"></div>
  <div class="sonar-wave sonar-wave-2"></div>
  <div class="sonar-wave sonar-wave-3"></div>
  
  <div class="container mx-auto px-4 relative z-10">
    <!-- Icono de geolocalizaci√≥n flotante -->
    <div class="flex justify-center mb-6">
      <div class="animate-float-gentle">
        <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="text-gray-700">
          <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z" fill="currentColor"/>
        </svg>
      </div>
    </div>

    <!-- T√≠tulo de la secci√≥n -->
    <div class="text-center mb-8">
      <h2 class="text-white font-sans uppercase font-bold text-xl md:text-4xl mb-2">
        {deliveryTitle}
      </h2>
      <h3 class="text-white font-title uppercase font-bold text-3xl md:text-6xl">
        {deliverySubTitle}
      </h3>
    </div>

    <!-- Contenedor para las apps de delivery -->
    <div id="delivery-app-container" class="flex justify-center items-center">
      <div id="delivery-loading" class="text-center p-8 max-w-sm animate-pulse">
        <div class="w-24 h-24 bg-gray-300 rounded-full mx-auto mb-4"></div>
        <div class="h-4 bg-gray-300 rounded w-3/4 mx-auto mb-2"></div>
        <div class="h-8 bg-gray-300 rounded w-full"></div>
        <p class="text-white mt-2">Detectando tu ubicaci√≥n...</p>
      </div>
      
      <div id="delivery-content" class="hidden">
        <!-- Las apps se cargar√°n din√°micamente aqu√≠ -->
      </div>
    </div>
  </div>
  <div class="absolute bottom-0 left-0 right-0 w-full">
    <svg width="100%" height="87" fill="#91CAE9" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1442 57" preserveAspectRatio="none" class="z-10">
      <path d="M0 65V0.5C850 129 1440 0.5 1440 0.5V65H0Z" />
    </svg>
  </div>
</section>

<script define:vars={{ deliveryApps }}>
  // Funciones de detecci√≥n de pa√≠s integradas
  const COUNTRY_MAPPINGS = {
    'HN': 'Honduras',
    'GT': 'Guatemala', 
    'SV': 'El Salvador',
    'NI': 'Nicaragua',
    'CR': 'Costa Rica',
    'DO': 'Rep√∫blica Dominicana'
  };

  // Funci√≥n principal de detecci√≥n de pa√≠s
  async function detectUserCountry() {
    try {
      console.log('üåç Iniciando detecci√≥n de pa√≠s...');
      
      // Intentar con API de headers del servidor
      try {
        const response = await fetch('/api/geo-headers');
        if (response.ok) {
          const data = await response.json();
          if (data.country) {
            console.log('‚úÖ Pa√≠s detectado via servidor:', data);
            return {
              country: COUNTRY_MAPPINGS[data.country] || data.country,
              countryCode: data.country,
              source: 'server',
              success: true
            };
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è API servidor fall√≥:', error);
      }
      
      // Fallback a ipapi.co
      try {
        const response = await fetch('https://ipapi.co/json/');
        if (response.ok) {
          const data = await response.json();
          console.log('‚úÖ Pa√≠s detectado via ipapi.co:', data);
          return {
            country: data.country_name,
            countryCode: data.country_code,
            source: 'ipapi',
            success: true
          };
        }
      } catch (error) {
        console.log('‚ö†Ô∏è ipapi.co fall√≥:', error);
      }
      
      // Fallback a api.country.is
      try {
        const response = await fetch('https://api.country.is/');
        if (response.ok) {
          const data = await response.json();
          console.log('‚úÖ Pa√≠s detectado via api.country.is:', data);
          return {
            country: COUNTRY_MAPPINGS[data.country] || data.country,
            countryCode: data.country,
            source: 'country-is',
            success: true
          };
        }
      } catch (error) {
        console.log('‚ö†Ô∏è api.country.is fall√≥:', error);
      }
      
      console.log('‚ùå Todas las APIs fallaron');
      return {
        country: null,
        countryCode: null,
        source: 'fallback',
        success: false
      };
      
    } catch (error) {
      console.error('üí• Error general en detecci√≥n:', error);
      return {
        country: null,
        countryCode: null,
        source: 'error',
        success: false
      };
    }
  }

  // Funci√≥n para mostrar apps de delivery seg√∫n el pa√≠s detectado
  function showDeliveryApps(geoResult) {
    const loadingElement = document.getElementById('delivery-loading');
    const contentElement = document.getElementById('delivery-content');
    
    // Verificar que los elementos existen
    if (!loadingElement || !contentElement) {
      console.error('Elementos del DOM no encontrados');
      return;
    }

    // Limpiar contenido anterior
    contentElement.innerHTML = '';

    const detectedCountry = geoResult?.country;
    const countryCode = geoResult?.countryCode;

    // Buscar app por nombre de pa√≠s o c√≥digo de pa√≠s
    const userCountryApp = deliveryApps.find(app => {
      if (!detectedCountry && !countryCode) return false;
      
      // Comparar por nombre completo
      if (detectedCountry && app.country.toLowerCase() === detectedCountry.toLowerCase()) {
        return true;
      }
      
      // Comparar por c√≥digo de pa√≠s (para casos como HN -> Honduras)
      if (countryCode) {
        const countryMappings = {
          'HN': 'Honduras',
          'GT': 'Guatemala',
          'SV': 'El Salvador',
          'NI': 'Nicaragua',
          'CR': 'Costa Rica',
          'DO': 'Rep√∫blica Dominicana'
        };
        
        const mappedCountry = countryMappings[countryCode];
        if (mappedCountry && app.country.toLowerCase() === mappedCountry.toLowerCase()) {
          return true;
        }
      }
      
      return false;
    });

    let appsToShow = [];
    let showCountryIndicator = true;

    if (userCountryApp) {
      // Si hay app para el pa√≠s del usuario, solo mostrar esa
      appsToShow = [userCountryApp];
      showCountryIndicator = false;
      console.log(`üéØ Mostrando app espec√≠fica para tu pa√≠s: ${userCountryApp.app_name} (${detectedCountry || countryCode})`);
    } else {
      // Si no hay app para el pa√≠s o no se detect√≥ pa√≠s, mostrar todas
      appsToShow = deliveryApps;
      showCountryIndicator = true;
      console.log(`üåç No hay app espec√≠fica para ${detectedCountry || countryCode || 'pa√≠s no detectado'}, mostrando todas las apps disponibles`);
    }

    // Crear una tarjeta para cada app a mostrar
    appsToShow.forEach(app => {
      const appCard = document.createElement('div');
      appCard.className = `text-center transition-all duration-300 hover:scale-105`;
      
      appCard.innerHTML = `
        <div class="relative">
          <a href="${app.app_url}" target="_blank" rel="noopener noreferrer" class="block">
            <img src="${app.app_icon}" alt="Logo de ${app.app_name}" class="w-40 h-40 bg-white mx-auto mb-4 font-sans rounded-full object-cover shadow-lg p-4 hover:shadow-xl transition-shadow">
            ${showCountryIndicator ? `<p class="text-sm text-gray-200 mb-4">Disponible en <span class="font-semibold text-yellow-300">${app.country}</span></p>` : ''}
          </a>
        </div>
      `;
      
      contentElement.appendChild(appCard);
    });

    // Ajustar el grid seg√∫n la cantidad de apps
    if (appsToShow.length === 1) {
      contentElement.className = 'flex justify-center max-w-sm mx-auto';
    } else {
      contentElement.className = 'grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto';
    }

    // Ocultar loading y mostrar contenido
    loadingElement.classList.add('hidden');
    contentElement.classList.remove('hidden');
    
    console.log(`üì± Mostrando ${appsToShow.length} app(s) de delivery. Pa√≠s: ${detectedCountry || 'No detectado'} (${countryCode || 'Sin c√≥digo'})`);
  }

  // Inicializar detecci√≥n cuando se carga el DOM
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ DOM cargado, iniciando detecci√≥n de pa√≠s para delivery...');
    
    try {
      const geoResult = await detectUserCountry();
      showDeliveryApps(geoResult);
    } catch (error) {
      console.error('üí• Error en detecci√≥n de pa√≠s:', error);
      // Mostrar todas las apps si hay error
      showDeliveryApps({ country: null, countryCode: null, success: false });
    }
  });
</script>

<style>
  /* Animaci√≥n flotante para el icono de geolocalizaci√≥n */
  @keyframes float-gentle {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-8px);
    }
  }
  
  .animate-float-gentle {
    animation: float-gentle 3s ease-in-out infinite;
  }
  
  /* Efecto sonar con ondas */
  .sonar-wave {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 200px;
    height: 200px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    animation: sonar-pulse 4s ease-out infinite;
  }
  
  .sonar-wave-1 {
    animation-delay: 0s;
  }
  
  .sonar-wave-2 {
    animation-delay: 1.3s;
  }
  
  .sonar-wave-3 {
    animation-delay: 2.6s;
  }
  
  @keyframes sonar-pulse {
    0% {
      transform: translate(-50%, -50%) scale(0.1);
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
    100% {
      transform: translate(-50%, -50%) scale(8);
      opacity: 0;
    }
  }
</style>
