---
// src/components/Header.astro
import { t, type Locale } from '../../../i18n/i18n';
import { logos} from '../../../config/assets';
import LocalizedImage from '../LazyImage.astro';
import LanguageSwitcher from '../../i18n/LanguageSwitcher.astro';
import './styles.css';

// Importar script sin exportación
export const prerender = true;


export interface Props {
  currentLang: Locale;
}
const { currentLang } = Astro.props;

// Interfaces for type safety
interface SocialMedia {
  name: string;
  url: string;
  iconUrl: string;
  alt?: string;
}

interface SocialMediaCollection {
  [key: string]: SocialMedia;
}

// Obtener los datos de social media (url y alt) desde los archivos de traducción
const socialMedia = t('social_media', { namespace: 'common', locale: currentLang }) as SocialMediaCollection;

interface MenuItem {
  id: string;
  text: string;
  href: string;
  submenu?: MenuItem[];
}

const itemsFromT = t('menu_items', { namespace: 'common', locale: currentLang });
const menuItems: MenuItem[] = Array.isArray(itemsFromT) ? itemsFromT : [];
const openMenuLabel: string = t('menu_labels.open_main_menu', { namespace: 'common', locale: currentLang }) || 'Open main menu';

const menuIconSvg = `
  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
  </svg>
`;
const closeIconSvg = `
  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
  </svg>
`;
const closeMenuLabel: string = t('menu_labels.close_main_menu', { namespace: 'common', locale: currentLang }) || 'Close main menu';
---

<header id="site-header" class="fixed md:absolute top-0 left-0 w-full z-40 transition-all duration-300 bg-black bg-opacity-50 backdrop-blur-md text-white py-3 lg:pt-8 px-4 sm:px-6 lg:px-8 font-sans">
  <div class="container mx-auto flex items-center justify-between h-16">
    
    <!-- Logo para Desktop (Izquierda) -->
    <div class="hidden md:flex items-center flex-shrink-0 pt-6">
      <a href={`/${currentLang}/`} class="block">
        <img src={logos.principal.url} alt={logos.principal.alt || 'Snacks Yummies Logo'} class="h-10 lg:h-20 w-auto" transition:name="logo" />
      </a>
    </div>

    <!-- Menú Hamburguesa (Izquierda en Móvil) -->
    <div class="md:hidden flex items-center">
      <button id="mobile-menu-button" type="button" class="md:hidden text-white" aria-controls="mobile-menu" aria-expanded="false">
        <span class="sr-only">{openMenuLabel}</span>
        <div id="menu-icon-container" set:html={menuIconSvg} />
      </button>
    </div>

    <!-- Logo para Móvil (Derecha en Móvil) -->
    <div class="md:hidden flex items-center">
      <a href={`/${currentLang}/`} class="block">
        <img src={logos.principal.url} alt={logos.principal.alt || 'Snacks Yummies Logo'} class="h-10 w-auto" transition:name="logo-mobile" />
      </a>
    </div>
    <!-- Desktop Right Aligned Content: Socials on top, Nav/Lang below, all right-aligned -->
    <div class="hidden md:flex flex-col items-end space-y-2 pt-1">
      {/* Social Media Row */}
      <div class="flex items-center space-x-3">
        {Object.entries(socialMedia).map(([key, social]) => (
          <a href={social.url} target="_blank" rel="noopener noreferrer" title={social.name} class="text-white hover:text-gray-300">
            <span class="sr-only">{social.name}</span>
            {social.iconUrl && (
              <img
                src={social.iconUrl}
                alt={social.alt || social.name}
                class="h-5 w-5 filter invert"
                width={20}
                height={20}
                loading="lazy"
              />
            )}
          </a>
        ))}
      </div>

      {/* Navigation and Language Switcher Row */}
      <div class="flex items-center">
        <nav class="flex items-center space-x-1 lg:space-x-2">
          {menuItems.map(item => (
            <div class="relative group">
              <a href={item.href} class="text-md font-sans font-semibold hover:text-gray-300 transition-colors px-3 py-2 flex items-center text-shadow">
                {item.text}
                {item.submenu && (
                  <svg class="w-4 h-4 ml-1 fill-current" viewBox="0 0 20 20"><path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" /></svg>
                )}
              </a>
              {item.submenu && (
                <div class="absolute left-0 mt-0 w-48 bg-white text-gray-800 rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 ease-in-out invisible group-hover:visible z-50 py-1">
                  {item.submenu.map(subItem => (
                    <div class="relative group/submenu">
                      <a href={subItem.href} class="block px-4 py-2 text-sm font-sans hover:bg-black hover:text-white flex justify-between items-center transition-colors duration-200">
                        {subItem.text}
                        {subItem.submenu && (
                          <svg class="w-3 h-3 ml-1 fill-current" viewBox="0 0 20 20"><path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" /></svg>
                        )}
                      </a>
                      {subItem.submenu && (
                        <div class="absolute left-full top-0 w-48 bg-white text-gray-800 rounded-md shadow-lg opacity-0 group-hover/submenu:opacity-100 transition-opacity duration-200 ease-in-out invisible group-hover/submenu:visible z-50 py-1">
                          {subItem.submenu.map(thirdItem => (
                            <a href={thirdItem.href} class="block px-4 py-2 text-sm font-sans hover:bg-black hover:text-white transition-colors duration-200">{thirdItem.text}</a>
                          ))}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </nav>
  
        <div class="flex items-center ml-4">
          <LanguageSwitcher activeLocale={currentLang} />
        </div>
      </div>
    </div>

  </div>

  <!-- Menú Móvil -->
  <div id="mobile-menu" class="hidden md:hidden fixed inset-0 bg-black bg-opacity-90 z-50 overflow-y-auto">
    <div class="container mx-auto px-4 py-8">
      <div class="flex justify-between items-center mb-8">
        <a href={`/${currentLang}/`} class="block">
          <img src={logos.principal.url} alt={logos.principal.alt || 'Taqueritos Logo'} class="h-10 w-auto" />
        </a>
        <button id="mobile-menu-close" type="button" class="text-white">
          <span class="sr-only">{closeMenuLabel}</span>
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <nav class="flex flex-col items-center space-y-3 text-center w-full">
        {menuItems.map(item => (
          <div class="w-full">
            <div class="flex items-center justify-center">
              {item.submenu ? (
                <>
                  <a href="#" class="menu-parent block text-xl font-sans font-medium hover:text-gray-300 transition-colors py-2">
                    {item.text}
                  </a>
                  <button class="menu-toggle px-2 py-1 text-white hover:text-gray-300 ml-1">
                    <svg class="w-5 h-5 chevron-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </button>
                </>
              ) : (
                <a href={item.href} class="block text-xl font-sans font-medium hover:text-gray-300 transition-colors py-2">
                  {item.text}
                </a>
              )}
            </div>
            {item.submenu && (
              <div class="submenu-container hidden mt-1 space-y-1 pl-4 text-center">
                {item.submenu.map(subItem => (
                  <div>
                    <div class="flex items-center justify-center">
                      {subItem.submenu ? (
                        <>
                          <a href="#" class="submenu-parent block text-lg font-sans font-normal text-gray-400 hover:text-gray-200 transition-colors py-1">{subItem.text}</a>
                          <button class="submenu-toggle px-2 py-1 text-gray-400 hover:text-gray-200 ml-1">
                            <svg class="w-4 h-4 chevron-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                          </button>
                        </>
                      ) : (
                        <a href={subItem.href} class="block text-lg font-sans font-normal text-gray-400 hover:text-gray-200 transition-colors py-1">{subItem.text}</a>
                      )}
                    </div>
                    {subItem.submenu && (
                      <div class="third-level-submenu hidden mt-1 space-y-1 pl-4 text-center">
                        {subItem.submenu.map(thirdItem => (
                          <a href={thirdItem.href} class="block text-md font-sans font-normal text-gray-500 hover:text-gray-300 transition-colors py-1 text-center">{thirdItem.text}</a>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </nav>

      <!-- Selector de Idioma Móvil -->
      <div class="mt-6 mb-6 flex justify-center">
        <LanguageSwitcher activeLocale={currentLang} />
      </div>

      <div class="mt-auto flex space-x-4">
        {Object.entries(socialMedia).map(([key, social]) => {
          const sm = social as { name: string; url: string; alt?: string; iconUrl?: string };
          return (
            <a href={sm.url} target="_blank" rel="noopener noreferrer" title={sm.name} class="text-white hover:text-gray-300">
              <span class="sr-only">{sm.name}</span>
              {sm.iconUrl && (
                <LocalizedImage
                  assetKey={sm.iconUrl}
                  alt={sm.alt || sm.name}
                  class="h-6 w-6 filter invert"
                  width={24}
                  height={24}
                  loading="lazy"
                />
              )}
            </a>
          );
        })}
      </div>
    </div>
  </div>
</header>

<script define:vars={{ astroMenuIconSvg: menuIconSvg, astroCloseIconSvg: closeIconSvg }}>
// Función para controlar el comportamiento del header al hacer scroll en desktop
function initHeaderScrollBehavior() {
  const header = document.getElementById('site-header');
  let lastScrollTop = 0;
  
  function handleScroll() {
    if (window.innerWidth < 768) return; // Solo aplicar en desktop (md y superior)
    
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    
    // Si estamos en el top de la página (primeros 50px), mantener como absolute
    if (scrollTop <= 50) {
      header.classList.remove('fixed');
      header.classList.add('absolute');
      header.classList.remove('bg-black', 'bg-opacity-90');
      header.classList.add('bg-black', 'bg-opacity-50', 'backdrop-blur-md');
    } else {
      // Si hacemos scroll hacia abajo, fijar el header
      header.classList.remove('absolute');
      header.classList.add('fixed');
      header.classList.remove('bg-opacity-50');
      header.classList.add('bg-black', 'bg-opacity-90');
    }
    
    lastScrollTop = scrollTop;
  }
  
  window.addEventListener('scroll', handleScroll);
  window.addEventListener('resize', handleScroll);
  
  // Ejecutar una vez al cargar para establecer el estado inicial
  handleScroll();
}
function initMobileMenu() {
  // Función para alternar la visibilidad del submenú
  function toggleSubmenu(submenuContainer, toggleButton) {
    submenuContainer.classList.toggle('hidden');
    const svg = toggleButton.querySelector('svg');
    if (submenuContainer.classList.contains('hidden')) {
      // Show down arrow
      svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>';
    } else {
      // Show up arrow
      svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>';
    }
  }
  const menuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const closeButton = document.getElementById('mobile-menu-close');
  const menuIconContainer = document.getElementById('menu-icon-container');

  if (menuButton && mobileMenu && closeButton && menuIconContainer) {
    menuButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
      const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
      menuButton.setAttribute('aria-expanded', (!isExpanded).toString());
      menuIconContainer.innerHTML = isExpanded ? astroMenuIconSvg : astroCloseIconSvg;
    });
    
    closeButton.addEventListener('click', () => {
      mobileMenu.classList.add('hidden');
      menuButton.setAttribute('aria-expanded', 'false');
      menuIconContainer.innerHTML = astroMenuIconSvg;
    });
  }
  
  // Add event listeners for menu toggles (first level)
  const menuToggles = document.querySelectorAll('.menu-toggle');
  menuToggles.forEach(toggle => {
    toggle.addEventListener('click', (e) => {
      e.preventDefault();
      const parentDiv = toggle.closest('.w-full');
      const submenuContainer = parentDiv.querySelector('.submenu-container');
      
      if (submenuContainer) {
        toggleSubmenu(submenuContainer, toggle);
      }
    });
  });
  
  // Add event listeners for menu parent items (first level)
  const menuParents = document.querySelectorAll('.menu-parent');
  menuParents.forEach(parent => {
    parent.addEventListener('click', (e) => {
      e.preventDefault();
      const parentDiv = parent.closest('.w-full');
      const submenuContainer = parentDiv.querySelector('.submenu-container');
      const toggle = parentDiv.querySelector('.menu-toggle');
      
      if (submenuContainer && toggle) {
        toggleSubmenu(submenuContainer, toggle);
      }
    });
  });
  
  // Add event listeners for submenu toggles (second level)
  const submenuToggles = document.querySelectorAll('.submenu-toggle');
  submenuToggles.forEach(toggle => {
    toggle.addEventListener('click', (e) => {
      e.preventDefault();
      const parentDiv = toggle.closest('div');
      const thirdLevelSubmenu = parentDiv.nextElementSibling;
      
      if (thirdLevelSubmenu && thirdLevelSubmenu.classList.contains('third-level-submenu')) {
        toggleSubmenu(thirdLevelSubmenu, toggle);
      }
    });
  });
  
  // Add event listeners for submenu parent items (second level)
  const submenuParents = document.querySelectorAll('.submenu-parent');
  submenuParents.forEach(parent => {
    parent.addEventListener('click', (e) => {
      e.preventDefault();
      const parentDiv = parent.closest('div');
      const thirdLevelSubmenu = parentDiv.nextElementSibling;
      const toggle = parentDiv.querySelector('.submenu-toggle');
      
      if (thirdLevelSubmenu && thirdLevelSubmenu.classList.contains('third-level-submenu') && toggle) {
        toggleSubmenu(thirdLevelSubmenu, toggle);
      }
    });
  });
}

// Ensure the script runs after the DOM is fully loaded
if (typeof window !== 'undefined') {
  if (document.readyState === 'loading') { // Still loading
    document.addEventListener('DOMContentLoaded', () => {
      initMobileMenu();
      initHeaderScrollBehavior();
    });
  } else { // `DOMContentLoaded` has already fired
    initMobileMenu();
    initHeaderScrollBehavior();
  }
}
</script>
