---
import Subscribe from '../Subscribe/index.astro';
import { getLocale } from '../../../i18n/i18n';

export interface Props {
  placeholder: string;
  buttonText: string;
  title?: string;
  centered?: boolean;
  class?: string;
}

const { placeholder, buttonText, title, centered = false, class: className = '' } = Astro.props;

// Obtener el idioma actual para pasarlo al componente Subscribe
const currentLang = getLocale(Astro.url.pathname) || 'es';

---

<!-- Wrapper que mantiene la estructura anterior para compatibilidad -->
<div class={`newsletter-component w-full flex flex-col ${className}`}>
  <!-- Utilizamos el componente Subscribe pero mantenemos la misma API externa -->
  <Subscribe 
    currentLang={currentLang}
    customTitle={title}
    customPlaceholder={placeholder}
    customButtonText={buttonText}
    centered={centered}
    class="w-full"
  />
</div>

<!-- Mantenemos este script para compatibilidad con código antiguo que pueda estar accediendo a estos elementos -->
<script>
  // Este script ahora solo proporciona compatibilidad hacia atrás
  // La validación real y el envío del formulario ahora son manejados por el componente Subscribe
  const newsletterForms = document.querySelectorAll('.newsletter-component');
  
  // Redirigimos los eventos del componente Newsletter al componente Subscribe
  newsletterForms.forEach(form => {
    const legacyButton = form.querySelector('.newsletter-component > button');
    const legacyInput = form.querySelector('.newsletter-component > input');
    
    // Si encontramos botón o input directo en newsletter-component (versión antigua),
    // redirigimos el evento al nuevo componente
    if (legacyButton || legacyInput) {
      console.warn('Usando componente Newsletter en formato antiguo. Considere migrar directamente a Subscribe.');
      
      // El formulario de Subscribe dentro del componente
      const subscribeForm = form.querySelector('form[data-subscribe-form]');
      const subscribeInput = form.querySelector('form[data-subscribe-form] input[name="email"]');
      const subscribeButton = form.querySelector('form[data-subscribe-form] button[type="submit"]');
      
      if (subscribeForm && subscribeButton && subscribeInput) {
        if (legacyButton) {
          legacyButton.addEventListener('click', () => {
            // Simular un submit del formulario de Subscribe
            subscribeForm.dispatchEvent(new Event('submit', { bubbles: true }));
          });
        }
        
        if (legacyInput) {
          legacyInput.addEventListener('input', (e) => {
            // Sincronizar el valor con el input de Subscribe
            subscribeInput.value = e.target.value;
          });
        }
      }
    }
  });
</script>
