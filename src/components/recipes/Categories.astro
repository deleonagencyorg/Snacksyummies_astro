---
// src/components/recipes/Categories.astro
import { getLocale, t } from '../../i18n/i18n';

export interface CategoryItem {
  label: string;
  slug: string;
  logo?: string;
  bgColor?: string;
}

export interface Props {
  title?: string;
  items?: CategoryItem[];
  allLabel?: string;
  queryKey?: string; // e.g. 'brand'
  baseHref?: string; // defaults to current path
  active?: string | null; // active slug
  showArrows?: boolean;
  hideTitle?: boolean;
}

const currentLang = getLocale();
const {
  title = currentLang === 'es' ? 'Recetas con tus marcas favoritas' : 'Recipes with your favorite brands',
  items = t('brands', { namespace: 'brands', locale: currentLang }) as unknown as CategoryItem[],
  allLabel = currentLang === 'es' ? 'TODAS' : 'ALL',
  queryKey = 'brand',
  baseHref = Astro.url.pathname,
  active = null,
  showArrows = true,
  hideTitle = false,
}: Props = Astro.props;
---

<div class="content-stretch flex flex-col gap-8 items-center justify-start w-full py-12">
  <!-- Header Title -->
  {!hideTitle && (
    <div class="text-center">
      <h2 class="text-white text-4xl md:text-6xl font-bold font-['Trois_Mille_TRIAL_Bold'] leading-10">
        {title}
      </h2>
    </div>
  )}
  <!-- Generic Categories Slider -->
  <div class="w-full max-w-[1400px] mx-auto px-4 relative" data-query-key={queryKey}>
    {showArrows && (
      <>
        <button class="nav-btn left-2 md:left-4" type="button" aria-label="Prev" data-dir="-1">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
            <polyline points="15 18 9 12 15 6" />
          </svg>
        </button>
        <button class="nav-btn right-2 md:right-4" type="button" aria-label="Next" data-dir="1">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
            <polyline points="9 18 15 12 9 6" />
          </svg>
        </button>
      </>
    )}

    <div id="cat-scroll" class="flex gap-6 lg:gap-8 overflow-x-auto lg:overflow-visible lg:flex-wrap lg:justify-center scrollbar-hide pb-4 px-4 lg:px-8" style="scroll-snap-type: x mandatory;">
      <!-- All Button -->
      {queryKey === 'brand' ? (
        <button
          type="button"
          class="brand-card brand-filter-btn flex-shrink-0 w-20 h-20 md:w-28 md:h-28 rounded-full shadow-lg flex items-center justify-center hover:scale-105 transition-all duration-300 cursor-pointer bg-gray-600 opacity-100"
          style="scroll-snap-align: center; --brand-color: #4B5563;"
          data-slug="all"
          aria-label={allLabel}
        >
          <span class="text-white font-bold text-xs md:text-base text-center px-2">{allLabel}</span>
        </button>
      ) : (
        <a
          href={`${baseHref}?${queryKey}=all`}
          class="brand-card brand-filter-btn flex-shrink-0 w-20 h-20 md:w-28 md:h-28 rounded-full shadow-lg flex items-center justify-center hover:scale-105 transition-all duration-300 cursor-pointer bg-gray-600 opacity-100"
          style="scroll-snap-align: center; --brand-color: #4B5563;"
          data-slug="all"
        >
          <span class="text-white font-bold text-xs md:text-base text-center px-2">{allLabel}</span>
        </a>
      )}

      {items.map((it: CategoryItem) => (
        queryKey === 'brand' ? (
          <button
            type="button"
            class="brand-card brand-filter-btn flex-shrink-0 w-20 h-20 md:w-28 md:h-28 rounded-full shadow-lg flex items-center justify-center hover:scale-105 transition-all duration-300 cursor-pointer"
            style={`scroll-snap-align: center; background-color: ${it.bgColor ?? '#E5E7EB'}; --brand-color: ${it.bgColor ?? '#E5E7EB'};`}
            data-slug={it.slug}
            aria-label={it.label}
          >
            {it.logo ? (
              <img src={it.logo} alt={it.label} class="w-16 h-16 md:w-24 md:h-24 object-contain rounded-full" loading="lazy" />
            ) : (
              <span class="text-white font-bold text-xs md:text-base text-center px-2">{it.label}</span>
            )}
          </button>
        ) : (
          <a
            href={`${baseHref}?${queryKey}=${it.slug}`}
            class="brand-card brand-filter-btn flex-shrink-0 w-20 h-20 md:w-28 md:h-28 rounded-full shadow-lg flex items-center justify-center hover:scale-105 transition-all duration-300 cursor-pointer"
            style={`scroll-snap-align: center; background-color: ${it.bgColor ?? '#E5E7EB'}; --brand-color: ${it.bgColor ?? '#E5E7EB'};`}
            data-slug={it.slug}
          >
            {it.logo ? (
              <img src={it.logo} alt={it.label} class="w-16 h-16 md:w-24 md:h-24 object-contain rounded-full" loading="lazy" />
            ) : (
              <span class="text-white font-bold text-xs md:text-base text-center px-2">{it.label}</span>
            )}
          </a>
        )
      ))}
    </div>
  </div>
</div>

<style>
  /* Hide scrollbar for Chrome, Safari and Opera */
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  /* Hide scrollbar for IE, Edge and Firefox */
  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }

  /* Smooth scrolling behavior */
  .scrollbar-hide {
    scroll-behavior: smooth;
  }

  .brand-card{
    margin-top: 12px;
  }

  /* Brand card hover effect */
  .brand-card:hover {
    border-radius: 62.5rem;
    border: 4px solid var(--brand-color);
    box-shadow: 0 8px 25px -5px color-mix(in srgb, var(--brand-color) 30%, transparent);
    background-color: color-mix(in srgb, var(--brand-color) 80%, black 20%) !important;
  }

  /* Active brand filter */
  .brand-card.active {
    border: 4px solid var(--brand-color);
    box-shadow: 0 8px 25px -5px color-mix(in srgb, var(--brand-color) 50%, transparent);
    transform: scale(1.1);
    opacity: 1; /* ensure fully opaque when active */
  }

  /* Inactive brand filters */
  .brand-card:not(.active) {
    opacity: 0.6;
  }
  /* When "all" is selected, keep all items fully visible */
  .all-active .brand-card { opacity: 1 !important; }

  /* Prevent clipping at the edges of the horizontal scroller */
  .scrollbar-hide > .brand-filter-btn:first-child {
    margin-left: 0.5rem; /* 8px */
  }
  .scrollbar-hide > .brand-filter-btn:last-child {
    margin-right: 0.5rem; /* 8px */
  }
  .nav-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 10;
    background: rgba(255,255,255,0.9);
    color: #111827;
    width: 2.25rem;
    height: 2.25rem;
    border-radius: 9999px;
    display: grid;
    place-items: center;
    font-size: 1.25rem;
    line-height: 1;
    box-shadow: 0 8px 25px -5px rgba(0,0,0,0.2);
  }
  /* Arrows visible on mobile & tablet; adjust position slightly */
  .nav-btn.left-2 { left: .5rem; }
  .nav-btn.right-2 { right: .5rem; }
  @media (min-width: 1024px) {
    .nav-btn.left-2 { left: 1rem; }
    .nav-btn.right-2 { right: 1rem; }
  }
</style>

<script>
  function initialize(){
    console.log('[CATEGORIES] 🚀 Inicializando componente Categories');
    const container = document.getElementById('cat-scroll');
    if (!container) {
      console.warn('[CATEGORIES] ⚠️ No se encontró #cat-scroll');
      return;
    }
    const buttons = Array.from(document.querySelectorAll('.brand-filter-btn')) as HTMLElement[];
    console.log('[CATEGORIES] 🔘 Botones de filtro encontrados:', buttons.length);

    // Determine active from URL or server-provided prop (embedded as data-active on wrapper via vite replace below)
    const url = new URL(window.location.href);
    const params = url.searchParams;
    // Prefer explicit queryKey from server through data attribute when available
    const wrapper = container.parentElement as HTMLElement;
    const qKey = wrapper?.getAttribute('data-query-key') || 'brand';
    const urlBrand = params.get(qKey);
    const sessionBrand = sessionStorage.getItem('selectedBrand');
    const activeSlugFromUrl = urlBrand || sessionBrand || 'all';
    console.log('[CATEGORIES] 📍 Marca activa:', { qKey, urlBrand, sessionBrand, activeSlugFromUrl });

    // Visual state: if "all" -> show all fully visible and only mark the ALL pill as active
    const allBtn = buttons.find(b => b.getAttribute('data-slug') === 'all');
    if (activeSlugFromUrl === 'all') {
      wrapper.classList.add('all-active');
      buttons.forEach((el)=> el.classList.remove('active'));
      if (allBtn) allBtn.classList.add('active');
    } else {
      wrapper.classList.remove('all-active');
      buttons.forEach((el)=>{
        const slug = el.getAttribute('data-slug');
        if (slug === activeSlugFromUrl) el.classList.add('active');
        else el.classList.remove('active');
      });
    }

    // Arrow nav
    document.querySelectorAll('.nav-btn').forEach((btn)=>{
      btn.addEventListener('click', ()=>{
        const dir = Number((btn as HTMLElement).getAttribute('data-dir') || '1');
        container.scrollBy({ left: dir * 220, behavior: 'smooth' });
      });
    });

    // Backward compatibility: dispatch brandFilterChange when qKey is 'brand'
    buttons.forEach((btn)=>{
      btn.addEventListener('click', (e)=>{
        const slug = btn.getAttribute('data-slug') || 'all';
        console.log('[CATEGORIES] 🖱️ Click en botón:', { slug, qKey });
        try { sessionStorage.setItem('selectedBrand', slug); } catch {}
        // Update visual state immediately for better UX
        if (slug === 'all') {
          wrapper.classList.add('all-active');
          buttons.forEach((el)=> el.classList.remove('active'));
          btn.classList.add('active');
        } else {
          wrapper.classList.remove('all-active');
          buttons.forEach((el)=> el.classList.remove('active'));
          btn.classList.add('active');
        }
        // Dispatch event for backward compatibility
        if (qKey === 'brand') {
          console.log('[CATEGORIES] 📡 Despachando evento brandFilterChange:', slug);
          // prevent full navigation; update URL and filter in place
          e.preventDefault();
          const u = new URL(window.location.href);
          u.searchParams.set(qKey, slug);
          history.pushState({}, '', u.toString());
          console.log('[CATEGORIES] 🔗 URL actualizada:', u.toString());
          const evt = new CustomEvent('brandFilterChange', { detail: { brand: slug }, bubbles: true });
          document.dispatchEvent(evt);
          console.log('[CATEGORIES] ✅ Evento despachado');
          const grid = document.querySelector('#recipes-grid');
          if (grid) (grid as HTMLElement).scrollIntoView({ behavior: 'smooth', block: 'start' });
        } else {
          console.log('[CATEGORIES] ⚠️ qKey no es "brand", permitiendo navegación normal');
        }
      });
    });
  }

  document.addEventListener('DOMContentLoaded', initialize);
  window.addEventListener('astro:page-load', initialize);
  window.addEventListener('astro:after-swap', initialize);
</script>