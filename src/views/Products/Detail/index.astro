---
// src/views/Products/Detail/index.astro
import { t } from '../../../i18n/i18n';
import type { Locale } from '../../../i18n/i18n';
import { getLocale } from '../../../i18n/i18n';
import './styles.css';
import Breadcrumb from '../../../components/common/Breadcrumb/Breadcrumb.astro';
import LazyImage from '../../../components/common/LazyImage.astro';
import DeliveryAppsCarousel from '../../../components/common/DeliveryAppsCarousel.astro';

// Interfaces para el producto
interface Product {
  id: string;
  slug?: string;
  title: string;
  image: string;
  imageMobile?: string;
  brand?: string;
  brandId?: string;
}

const { productId } = Astro.props;
const currentLang = getLocale();

// Obtener las marcas desde los archivos de localización
interface Brand {
  id: string;
  title?: string;
  logo?: string;
  bgColor?: string;
  products?: Array<{
    id: string;
    slug?: string;
    title: string;
    image: string;
    imageMobile?: string;
  }>;
}

const brandsData = t('brands', { namespace: 'brands', locale: currentLang }) as Brand[] || [];

// Buscar el producto en todas las marcas
let currentProduct: Product | null = null;
let currentBrand: Brand | null = null;

for (const brand of brandsData) {
  if (brand.products && Array.isArray(brand.products)) {
    const foundProduct = brand.products.find(p => p.id === productId || p.slug === productId);
    if (foundProduct) {
      currentProduct = {
        ...foundProduct,
        brand: brand.title || brand.id,
        brandId: brand.id
      };
      currentBrand = brand;
      break;
    }
  }
}

// Si no se encuentra el producto, mostrar un error
if (!currentProduct) {
  throw new Error(`Producto no encontrado: ${productId}`);
}

// Función para normalizar títulos con acentos
function normalizeTitle(input: string): string {
  if (!input) return '';

  // Primero normalizamos a NFC para unificar caracteres compuestos
  let text = input.normalize('NFC');

  // Método directo para casos específicos
  text = text
    // Vocales minúsculas con acento
    .replace(/Ã¡/g, 'á')
    .replace(/Ã©/g, 'é')
    .replace(/Ã­/g, 'í')
    .replace(/Ã³/g, 'ó')
    .replace(/Ãº/g, 'ú')
    // Vocales mayúsculas con acento
    .replace(/Ã/g, 'Á')
    .replace(/Ã‰/g, 'É')
    .replace(/Ã/g, 'Í')
    .replace(/Ã"/g, 'Ó')
    .replace(/Ãš/g, 'Ú')
    // Ñ y caracteres especiales
    .replace(/Ã±/g, 'ñ')
    .replace(/Ã'/g, 'Ñ')
    .replace(/Â/g, '')
    // Casos específicos observados
    .replace(/manÃ/g, 'maní')
    .replace(/japonÃ©s/g, 'japonés')
    .replace(/PlÃ¡tano/g, 'Plátano')
    .replace(/MaÃ­z/g, 'Maíz')
    .replace(/PÃ¡caros/g, 'Pícaros')
    .replace(/PÃ­caros/g, 'Pícaros')
    .replace(/JalapeÃ±o/g, 'Jalapeño')
    .replace(/ChicharrÃ³n/g, 'Chicharrón')
    .replace(/FusiÃ³n/g, 'Fusión')
    .replace(/ClÃ¡sicas/g, 'Clásicas')
    .replace(/Ã³n/g, 'ón');

  // Limpieza final de espacios y caracteres invisibles
  text = text.replace(/[\u00A0\u200B\u200C\u200D]/g, ' ').trim();

  // Normalizar nuevamente para asegurar consistencia
  return text.normalize('NFC');
}

// Helper para traducir y normalizar textos estáticos
function tr(es: string, en: string): string {
  return normalizeTitle(currentLang === 'es' ? es : en);
}

// Normalizar el producto completo (igual que en recetas)
if (currentProduct && currentProduct.title) {
  currentProduct = {
    ...currentProduct,
    title: normalizeTitle(currentProduct.title),
    brand: currentProduct.brand ? normalizeTitle(currentProduct.brand) : currentProduct.brand
  };
}

// Obtener el título normalizado
const productTitle = currentProduct.title;

// Textos según el idioma (ya normalizados)
const texts = {
  description: tr('Descripción', 'Description'),
  ingredients: tr('Ingredientes', 'Ingredients'),
  nutritionalInfo: tr('Información Nutricional', 'Nutritional Information'),
  sizes: tr('Presentaciones', 'Sizes'),
  relatedProducts: tr('Productos Relacionados', 'Related Products'),
  availableIn: tr('Disponible en', 'Available in'),
  backToProducts: tr('Volver a Productos', 'Back to Products'),
  servingsPerContainer: tr('8 Porciones Por Envase', '8 Servings Per Container'),
  servingSize: tr('Tamaño de la Porción', 'Serving Size'),
  servingSizeValue: tr('Aproximadamente 15 Chips (38g)', 'About 15 Chips (38g)'),
  amountPerServing: tr('Cantidad Por Porción', 'Amount Per Serving'),
  calories: tr('Calorías', 'Calories'),
  dailyValue: tr('Valor Diario', 'Daily Value'),
  totalFat: tr('Grasa Total', 'Total Fat'),
  saturatedFat: tr('Grasa Saturada', 'Saturated Fat'),
  transFat: tr('Grasa Trans', 'Trans Fat'),
  cholesterol: tr('Colesterol', 'Cholesterol'),
  presentation: tr('Presentación:', 'Presentation:'),
  presentationNote: tr('Tamaño de presentación varía de acuerdo al país', 'Presentation size varies by country')
};

// Productos relacionados (otros productos de la misma marca)
let relatedProducts: Product[] = [];
if (currentBrand && currentBrand.products) {
  relatedProducts = currentBrand.products
    .filter(p => p.id !== currentProduct?.id)
    .slice(0, 3)
    .map(p => ({
      ...p,
      title: normalizeTitle(p.title),
      brand: normalizeTitle(currentBrand?.title || currentBrand?.id || ''),
      brandId: currentBrand?.id || ''
    }));
}


---
<div class="w-full" >
<!-- Page background wrapper -->

  <!-- Hero Banner con fondo primary -->
  <div class="bg-white py-2">
  <!-- Breadcrumbs -->
  <div class="container mx-auto px-4">
    <Breadcrumb 
      items={[
        { label: 'Home', href: `/${currentLang}` },
        { label: currentLang === 'es' ? 'Productos' : 'Products', href: `/${currentLang}/${currentLang === 'es' ? 'productos' : 'products'}` },
        { label: productTitle, href: `#` },
      ]}
      textColor="text-primary"
    />
    </div>
</div>



  <!-- Detalle del producto con fondo blanco -->
  <div class="bg-white py-8 md:py-12">
  <div class="container mx-auto px-4">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12 max-w-7xl mx-auto">
      <!-- Columna izquierda: Imagen y presentaciones -->
      <div class="w-full">
        <!-- Imagen del producto -->
        <div class="product-image-container mb-8 flex justify-center">
          <LazyImage
            src={currentProduct.image}
            alt={productTitle}
            class="w-[300px] max-w-md h-auto object-contain"
            transition:name={`product-image-${currentProduct.id}`}
            priority={true}
          />
        </div>
        
        <!-- Presentaciones -->
        <div class="mt-8">
          <h2 class="text-xl md:text-2xl font-bold text-primary mb-4">{currentLang === 'es' ? 'Presentación:' : 'Presentation:'}</h2>
          <div class="flex gap-6 items-end justify-center">
            <div class="text-center">
              <div class="w-20 h-24 border-2 border-gray-300 rounded-lg mb-2 flex items-center justify-center">
                <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
                </svg>
              </div>
              <p class="text-sm font-semibold text-gray-700">140 g</p>
            </div>
            <div class="text-center">
              <div class="w-16 h-20 border-2 border-gray-300 rounded-lg mb-2 flex items-center justify-center">
                <svg class="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
                </svg>
              </div>
              <p class="text-sm font-semibold text-gray-700">70 g</p>
            </div>
          </div>
          <p class="text-xs text-gray-500 text-center mt-4 italic">*{currentLang === 'es' ? 'Tamaño de presentación varía de acuerdo al país' : 'Presentation size varies by country'}</p>
        </div>
      </div>
      
      <!-- Columna derecha: Información del producto -->
      <div class="w-full">
        <!-- Título del producto -->
        <h1 class="text-2xl md:text-3xl lg:text-4xl font-bold text-primary mb-6">{productTitle}</h1>
        
        <!-- Descripción -->
        <div class="mb-8">
          <h2 class="text-xl md:text-2xl font-bold text-primary mb-4">{currentLang === 'es' ? 'Descripción' : 'Description'}</h2>
          <div class="space-y-3">
            <div class="flex items-start gap-3">
              <svg class="w-6 h-6 text-primary flex-shrink-0 mt-1" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
              <p class="text-gray-700 leading-relaxed">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas rutrum sollicitudin magna, a lacinia urna finibus non.</p>
            </div>
            <div class="flex items-start gap-3">
              <svg class="w-6 h-6 text-primary flex-shrink-0 mt-1" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
              <p class="text-gray-700 leading-relaxed">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas rutrum sollicitudin.</p>
            </div>
          </div>
        </div>
        
        <!-- Información Nutricional -->
        <div class="mb-8">
          <h2 class="text-xl md:text-2xl font-bold text-primary mb-4">{currentLang === 'es' ? 'Nutrional Facts' : 'Nutritional Facts'}</h2>
          <div class="border border-gray-300 rounded-lg overflow-hidden">
            <div class="bg-gray-50 px-4 py-2 border-b border-gray-300">
              <p class="text-sm font-semibold text-gray-700">{currentLang === 'es' ? '8 Porciones Por Envase' : '8 Servings Per Container'}</p>
              <p class="text-sm text-gray-600">{currentLang === 'es' ? 'Tamaño de la Porción' : 'Serving Size'} <span class="float-right">{currentLang === 'es' ? 'Aproximadamente 15 Chips (38g)' : 'About 15 Chips (38g)'}</span></p>
            </div>
            <div class="px-4 py-2">
              <div class="border-b border-gray-200 py-2">
                <p class="text-sm font-semibold text-gray-700">{currentLang === 'es' ? 'Cantidad Por Porción' : 'Amount Per Serving'}</p>
              </div>
              <div class="border-b border-gray-200 py-2 flex justify-between">
                <span class="text-sm text-gray-700">{currentLang === 'es' ? 'Calorías' : 'Calories'}</span>
                <span class="text-sm font-bold text-gray-900">160</span>
              </div>
              <div class="py-1">
                <p class="text-xs text-right text-gray-600">% {currentLang === 'es' ? 'Valor Diario' : 'Daily Value'} *</p>
              </div>
              <div class="border-b border-gray-200 py-2 flex justify-between">
                <span class="text-sm text-gray-700">{currentLang === 'es' ? 'Grasa Total' : 'Total Fat'} 10 g</span>
                <span class="text-sm font-bold text-gray-900">13%</span>
              </div>
              <div class="border-b border-gray-200 py-2 flex justify-between pl-4">
                <span class="text-sm text-gray-700">{currentLang === 'es' ? 'Grasa Saturada' : 'Saturated Fat'} 1.5 g7</span>
                <span class="text-sm font-bold text-gray-900">7%</span>
              </div>
              <div class="border-b border-gray-200 py-2 flex justify-between pl-4">
                <span class="text-sm text-gray-700">{currentLang === 'es' ? 'Grasa Trans' : 'Trans Fat'} 0 g</span>
                <span class="text-sm font-bold text-gray-900">0%</span>
              </div>
              <div class="border-b border-gray-200 py-2 flex justify-between">
                <span class="text-sm text-gray-700">{currentLang === 'es' ? 'Colesterol' : 'Cholesterol'} 0 mg</span>
                <span class="text-sm font-bold text-gray-900">0%</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    {currentLang === 'es' && (
  <DeliveryAppsCarousel />
)}
    <!-- Productos relacionados -->
    {relatedProducts.length > 0 && (
      <div class="mt-16">
        <h2 class="text-2xl font-bold text-primary mb-8 text-center">{texts.relatedProducts}</h2>
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 md:gap-6 place-items-center">
          {relatedProducts.map(product => (
            <div class="product-item w-full">
              <a href={`/${currentLang}/${currentLang === 'es' ? 'productos' : 'products'}/${product.id}`} class="w-full flex flex-col items-center">
                <div class="w-full overflow-hidden mb-3 hover:scale-105 transition-transform duration-300">
                  <LazyImage
                    src={product.image}
                    alt={product.title}
                    class="w-full h-auto object-contain"
                  />
                </div>
                
                <h3 class="text-center font-title text-lg leading-tight text-primary">
                  {product.title}
                </h3>
              </a>
            </div>
          ))}
        </div>
      </div>
    )}
    
    <!-- Botón para volver a productos -->
    <div class="flex justify-center mt-12">
      <a href={`/${currentLang}/${currentLang === 'es' ? 'productos' : 'products'}`} class="bg-primary text-white py-3 px-8 rounded-full hover:bg-opacity-90 transition-all font-semibold">
        {texts.backToProducts}
      </a>
    </div>
  </div>
</div>
</div>
