---
// src/views/Products/Detail/index.astro
import { t } from '../../../i18n/i18n';
import type { Locale } from '../../../i18n/i18n';
import './styles.css';
import { initProductDetail } from './scripts.js';

interface ProductItem {
  id: string;
  name: string;
  description: string;
  price: number;
  category: string;
  images: string[];
  features: string[];
  relatedProducts?: string[];
}

const { currentLang, productId } = Astro.props;

// Obtener datos desde traducciones
const product = t(`items.${productId}`, { locale: currentLang, namespace: 'products' }) || {};

// Si el producto no existe, lanzar error
if (!product || Object.keys(product).length === 0) {
  throw new Error(t('errors.product_not_found', { locale: currentLang }));
}

// Asegurar que todas las propiedades necesarias existan
const safeProduct = {
  id: product.id || productId,
  name: product.name || '',
  description: product.description || '',
  price: product.price || 0,
  category: product.category || '',
  images: Array.isArray(product.images) ? product.images : [],
  features: Array.isArray(product.features) ? product.features : [],
  relatedProducts: Array.isArray(product.relatedProducts) ? product.relatedProducts : [],
  presentaciones: Array.isArray(product.presentaciones) ? product.presentaciones : [],
  background_image: product.background_image || '',
  short_description: product.short_description || ''
};

// Obtener todos los productos como un array
const productsData = t('products', { locale: currentLang }) || {};
const allProductsArray = Array.isArray(productsData.items) ? productsData.items : [];

// Filtrar productos relacionados
let relatedProducts: any[] = [];
if (safeProduct.relatedProducts.length > 0) {
  relatedProducts = allProductsArray.filter((p: any) => 
    safeProduct.relatedProducts.includes(p.id)
  );
} else {
  relatedProducts = allProductsArray
    .filter((p: any) => p.id !== productId && p.category === safeProduct.category)
    .slice(0, 3);
}

function formatPrice(price: number, locale: Locale): string {
  return new Intl.NumberFormat(locale, {
    style: 'currency',
    currency: locale === 'es' ? 'MXN' : 'USD'
  }).format(price);
}
---

<article class="product-detail bg-white py-12">
  <div class="container mx-auto px-4">
    <!-- Encabezado con nombre y precio -->
    <header class="mb-8">
      <h1 class="text-4xl font-bold text-gray-800 mb-2">{safeProduct.name}</h1>
      <div class="text-2xl font-semibold text-yellow-600">
        {formatPrice(safeProduct.price, currentLang)}
      </div>
    </header>

    <!-- Contenido principal -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <!-- Galería de imágenes -->
      <div class="product-gallery">
        {safeProduct.images.length > 0 ? (
          <>
            <div class="relative rounded-lg overflow-hidden mb-4 h-96">
              <img 
                src={safeProduct.images[0]} 
                alt={safeProduct.name}
                class="w-full h-full object-cover"
                onerror="this.onerror=null;this.src='/images/products/placeholder.jpg';"
              />
            </div>
            {safeProduct.images.length > 1 && (
              <div class="grid grid-cols-4 gap-2">
                {safeProduct.images.slice(1).map((image: string, index: number) => (
                  <div class="relative rounded overflow-hidden h-20 cursor-pointer" onclick="/* Lógica para cambiar imagen principal */">
                    <img 
                      src={image} 
                      alt={`${safeProduct.name} ${index + 2}`}
                      class="w-full h-full object-cover"
                      onerror="this.onerror=null;this.src='/images/products/placeholder.jpg';"
                    />
                  </div>
                ))}
              </div>
            )}
          </>
        ) : (
          <div class="relative rounded-lg overflow-hidden mb-4 h-96 bg-gray-100 flex items-center justify-center">
            <span class="text-gray-400">
              {t('products.no_image', { locale: currentLang })}
            </span>
          </div>
        )}
      </div>

      <!-- Detalles del producto -->
      <div>
        <!-- Descripción -->
        <section class="mb-8">
          <h2 class="text-2xl font-bold mb-4">
            {t('products.description', { locale: currentLang })}
          </h2>
          <p class="text-gray-700">{safeProduct.description}</p>
        </section>

        <!-- Características -->
        {safeProduct.features.length > 0 && (
          <section class="product-features mb-8">
            <h2 class="text-2xl font-bold mb-4">
              {t('products.features', { locale: currentLang })}
            </h2>
            <ul class="space-y-2">
              {safeProduct.features.map((feature: string, index: number) => (
                <li class="flex items-start">
                  <span class="mr-2">•</span>
                  <span>{feature}</span>
                </li>
              ))}
            </ul>
          </section>
        )}
      </div>
    </div>

    <!-- Productos relacionados -->
    {relatedProducts.length > 0 && (
      <section class="mt-16">
        <h2 class="text-2xl font-bold mb-8">
          {t('products.related_products', { locale: currentLang })}
        </h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {relatedProducts.map((related: any) => (
            <a 
              href={`/${currentLang}/${currentLang === 'es' ? 'productos' : 'products'}/${related.id}`} 
              class="block group"
            >
              <div class="bg-gray-50 rounded-lg overflow-hidden transition-all hover:shadow-md">
                <div class="relative h-48">
                  <img 
                    src={related.images?.[0] || '/images/products/placeholder.jpg'} 
                    alt={related.name}
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                    onerror="this.onerror=null;this.src='/images/products/placeholder.jpg';"
                  />
                </div>
                <div class="p-4">
                  <h3 class="font-medium text-lg text-gray-900 group-hover:text-yellow-600 transition-colors mb-1">
                    {related.name}
                  </h3>
                  <p class="text-yellow-600 font-medium">
                    {formatPrice(related.price, currentLang)}
                  </p>
                </div>
              </div>
            </a>
          ))}
        </div>
      </section>
    )}
  </div>
</article>

<script>
  // Este script se ejecuta solo en el navegador
  import { initProductDetail } from './scripts.js';
  document.addEventListener('DOMContentLoaded', () => {
    initProductDetail();
  });
</script>
