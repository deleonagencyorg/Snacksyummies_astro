---
import { t, type Locale } from '../../../i18n/i18n';

export interface Props {
  currentLang: Locale;
  variant?: 'footer' | 'home';
  customTitle?: string;
  customPlaceholder?: string; 
  customButtonText?: string;
  centered?: boolean;
  class?: string;
}

const { 
  currentLang, 
  variant = 'footer',
  customTitle, 
  customPlaceholder, 
  customButtonText, 
  centered = false, 
  class: className = ''
} = Astro.props;

// Obtener textos desde los archivos de traducción, usando namespace específico según variante
const namespace = variant === 'home' ? 'home' : 'common';

// Intentar usar textos personalizados, si no hay, usar los de traducciones
const title = customTitle || (variant === 'home' 
  ? t('socialmedia.newsletter', { namespace: 'home', locale: currentLang }) 
  : t('footer.newsletter_title', { namespace: 'common', locale: currentLang }));

const placeholder = customPlaceholder || (variant === 'home'
  ? t('newsletter.placeholder', { namespace: 'home', locale: currentLang })
  : t('footer.newsletter_placeholder', { namespace: 'common', locale: currentLang }));

const buttonText = customButtonText || (variant === 'home'
  ? t('newsletter.buttonText', { namespace: 'home', locale: currentLang })
  : t('footer.newsletter_button', { namespace: 'common', locale: currentLang }));

// Mensajes de validación
const requiredMessage = t('form_validation.required', { namespace: 'common', locale: currentLang });
const invalidEmailMessage = t('form_validation.invalid_email', { namespace: 'common', locale: currentLang });
const successMessage = t('subscribe.success', { namespace: 'common', locale: currentLang, fallback: '¡Gracias por suscribirte!' });

// Variables de entorno para la API
const apiHost = import.meta.env.PUBLIC_CONTACT_API_HOST;
const subscribePath = import.meta.env.PUBLIC_SUSCRIBE_FROM_PATH;

// Determinar las clases de alineación basadas en la propiedad centered
const alignmentClasses = centered 
  ? 'mx-auto text-center items-center' 
  : 'md:mx-0 md:text-left md:items-start';

// Determinar clases según variante
const variantClasses = variant === 'home' 
  ? 'bg-white text-primary shadow-md rounded-lg p-6' 
  : '';

// Generar ID único para múltiples formularios en la misma página
const formId = `subscribe-form-${Math.random().toString(36).substring(2, 9)}`;
---

<div class={`subscribe-component w-full flex flex-col text-center ${alignmentClasses} ${variantClasses} ${className}`} id={formId}>
  {currentLang === 'es' && title && (
    <h3 class={`font-title text-lg font-medium mb-3 ${variant === 'home' ? 'text-primary' : 'text-white'}`}>
      {title}
    </h3>
  )}

  <form 
    class="flex flex-col w-full" 
    method="post"
    data-subscribe-form
  >
    <!-- <div class="mb-2 relative w-full">
      <input 
        type="email" 
        name="email"
        placeholder={placeholder} 
        class={`w-full max-w-xs px-4 py-2 rounded-full text-black focus:outline-none focus:ring-2 focus:ring-primary 
          ${centered ? 'mx-auto' : 'mx-auto md:mx-0'}`}
        aria-label={placeholder}
        required
      />
      <div class="text-red-500 text-xs mt-1 hidden error-message" data-error-type="required">
        {requiredMessage}
      </div>
      <div class="text-red-500 text-xs mt-1 hidden error-message" data-error-type="invalid-email">
        {invalidEmailMessage}
      </div>
    </div> -->
    
    {currentLang === 'es' && (
      <a 
        href="/es/yummiesone" 
        class={`w-full max-w-xs bg-primary hover:bg-primary-dark text-white font-medium py-2 px-6 
          rounded-full transition-colors ${centered ? 'mx-auto' : 'mx-auto md:mx-0'} text-center`}
        aria-label="Ir a Yummies One"
      >
        Yummies One
      </a>
    )}
    <div class="text-green-500 text-sm mt-2 hidden success-message">
      {successMessage}
    </div>
  </form>
</div>

<script define:vars={{ formId, requiredMessage, invalidEmailMessage, successMessage, apiHost, subscribePath }}>
  // El componente ahora solo muestra el enlace a Yummies One
  // No necesita funcionalidad de suscripción
  console.log('Componente Subscribe cargado correctamente');
</script>
