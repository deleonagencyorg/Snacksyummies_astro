---
// src/views/Promotions/index.astro
import { t, type Locale } from '../../i18n/i18n';
import LazyImage from '../../components/common/LazyImage.astro';
import Carousel from '../../components/common/Carousel/index.astro';
import Breadcrumb from '../../components/common/Breadcrumb/Breadcrumb.astro';
import PromosCarousel from '../../components/promotions/PromosCarousel.astro';
import './styles.css';

export interface Props {
  currentLang: Locale;
}

const { currentLang } = Astro.props;

// Obtener datos de promociones
const promotionsData = t('promotions', { namespace: 'promotions', locale: currentLang }) || [];
const heroData = t('hero', { namespace: 'promotions', locale: currentLang }) || {};
const sectionsData = t('sections', { namespace: 'promotions', locale: currentLang }) || {};

// Filtrar promociones activas e inactivas
const activePromotions = promotionsData.filter((promo: any) => promo.status === 'active');
const finishedPromotions = promotionsData.filter((promo: any) => promo.status === 'finished');

// Get common assets and filter for promotion slides only (with IDs containing 'slide-promotion')
const commonAssets = t('assets.slider', { namespace: 'common', locale: currentLang }) || [];
const filteredAssets = Array.isArray(commonAssets) 
  ? commonAssets.filter(asset => 
      asset && 
      typeof asset === 'object' && 
      asset.id && 
      /slide-promotion\d+/.test(asset.id)
    )
  : [];

const slides = filteredAssets
  .filter(asset => asset.desktop && asset.mobile)
  .map(asset => ({
    desktop: asset.desktop,
    mobile: asset.mobile,
    alt: asset.alt || 'Snacks Yummies',
    title: asset.title || '',
    subtitle: asset.description || '',
    link: asset.url || asset.link || ''
  }));
---

<main class="promotions-page">
  
  
  <!-- Hero Section -->
  <section class="hero-section bg-gradient-to-b from-primary to-secondary text-white">
    <div class="relative z-0 w-full md:w-[100%] md:ml-auto md:h-full h-[72vh] md:flex md:items-center md:justify-center">
        <Carousel slides={slides} />
    </div>
  </section>
  <div class=" -mt-8 bg-gradient-to-r bg-[#1A649E] py-4">
    <Breadcrumb
    items={[
      { label: t('home', { namespace: 'promotions', locale: currentLang }), href: `/${currentLang}` },
      { label: currentLang=='es'?'Promociones':'Promotions', href: `/${currentLang}/promociones` },
    ]}
  />
  </div>
  <!-- Active Promotions Section -->
  <section class="active-promotions py-16 bg-[#1A649E] -mt-4">
    <div class="container mx-auto px-4">
      <h2 class="text-3xl md:text-4xl font-title font-bold text-center mb-12 text-white">
        {sectionsData.active?.title}
      </h2>
      
      {activePromotions.length > 0 ? (
        <div class="w-full max-w-[1036px] mx-auto">
          {activePromotions.map((promotion: any, index: number) => (
            <PromosCarousel 
              promotion={promotion} 
              currentLang={currentLang}
              currentIndex={index}
              totalItems={activePromotions.length}
            />
          ))}
        </div>
      ) : (
        <div class="text-center py-12">
          <p class="text-gray-500 text-lg">
            {sectionsData.active?.emptyMessage}
          </p>
        </div>
      )}
    </div>
  </section>

  <!-- Finished Promotions Section -->
  <section class="finished-promotions py-16 bg-[#1A649E]">
    <div class="container mx-auto px-4">
      <h2 class="text-3xl md:text-4xl font-title font-bold text-center mb-12 text-white">
        {sectionsData.finished?.title}
      </h2>
      
      {finishedPromotions.length > 0 ? (
        <div class="w-full max-w-[1036px] mx-auto">
          {finishedPromotions.map((promotion: any, index: number) => (
            <div class="opacity-75">
              <PromosCarousel 
                promotion={{
                  ...promotion,
                  buttonUrl: promotion.buttonUrl,
                  buttonText: promotion.buttonText,
                  image: {
                    ...promotion.image,
                    desktop: promotion.image.desktop + '?grayscale=1' // Add grayscale effect to finished promotions
                  }
                }}
                currentLang={currentLang}
                currentIndex={index}
                totalItems={finishedPromotions.length}
                isFinished={true}
              />
            </div>
          ))}
        </div>
      ) : (
        <div class="text-center py-12">
          <p class="text-gray-500 text-lg">
            {sectionsData.finished?.emptyMessage}
          </p>
        </div>
      )}
    </div>
  </section>
</main>
