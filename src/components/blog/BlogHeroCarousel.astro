---
import LazyImage from '../common/LazyImage.astro';
import { getLocale } from '../../i18n/i18n';
import { fade } from 'astro:transitions';

interface BlogNews {
  id: string;
  title: string;
  image: string;
  slug: string;
  excerpt?: string;
  date?: string | Date;
  createdAt?: string | Date;
  publishedAt?: string | Date;
}

interface Props {
  news: BlogNews[];
  currentLang?: string;
}

const { 
  news = [],
  currentLang = getLocale()
} = Astro.props;

// Tomar solo las últimas 3 noticias
const latestNews = news
  .filter(item => item.date || item.createdAt || item.publishedAt)
  .sort((a, b) => {
    const dateA = new Date(a.date || a.createdAt || a.publishedAt || 0).getTime();
    const dateB = new Date(b.date || b.createdAt || b.publishedAt || 0).getTime();
    return dateB - dateA;
  })
  .slice(0, 3);

const viewBlogText = currentLang === 'es' ? 'Leer más' : 'Read more';
---

<div class="relative w-full h-[60vh] overflow-hidden">
  <!-- Carousel Container -->
  <div class="relative w-full h-full">
    {latestNews.map((item: BlogNews, index: number) => (
      <div 
        class={`absolute inset-0 transition-opacity duration-1000 ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
        data-slide={index}
      >
        <!-- Imagen de fondo -->
        <div class="absolute inset-0 w-full h-full">
          <LazyImage
            src={item.image}
            alt={item.title}
            class="w-full h-full object-cover"
          />
        </div>
        
        <!-- Capa de opacidad -->
        <div class="absolute inset-0 bg-black bg-opacity-40"></div>
        
        <!-- Contenido centrado -->
        <div class="absolute inset-0 flex flex-col justify-center items-center text-center px-4 md:px-8 font-sans">
          <div class="max-w-4xl mx-auto">
            <!-- Título -->
            <h2 class="text-2xl md:text-5xl lg:text-6xl font-bold text-white mb-6 leading-tight font-sans">
              {item.title}
            </h2>
            
            <!-- Extracto (si existe) -->
            {item.excerpt && (
              <p class="text-lg md:text-xl text-white mb-8 max-w-2xl mx-auto opacity-90">
                {item.excerpt}
              </p>
            )}
            
            <!-- Botón de leer más -->
            <a 
              href={`/${currentLang}/blog/${item.slug || item.id}`}
              class="inline-block bg-white text-primary font-bold py-3 px-8 rounded-full text-lg hover:bg-gray-100 transition-colors duration-300 shadow-lg hover:shadow-xl"
              transition:animate="fade"
            >
              {viewBlogText}
            </a>
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <!-- Indicadores de navegación -->
  <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-3">
    {latestNews.map((_: BlogNews, index: number) => (
      <button
        class="w-3 h-3 rounded-full bg-white bg-opacity-50 hover:bg-opacity-100 transition-all duration-300"
        data-indicator={index}
        aria-label={`Go to slide ${index + 1}`}
      ></button>
    ))}
  </div>
  
  <!-- Botones de navegación -->
  <button
    class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-20 hover:bg-opacity-40 text-white p-2 rounded-full transition-all duration-300"
    id="prev-slide"
    aria-label="Previous slide"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>
  
  <button
    class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-20 hover:bg-opacity-40 text-white p-2 rounded-full transition-all duration-300"
    id="next-slide"
    aria-label="Next slide"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
    </svg>
  </button>
</div>

<script>
  class BlogHeroCarousel {
    private container: HTMLElement;
    private slides: NodeListOf<HTMLElement>;
    private indicators: NodeListOf<HTMLElement>;
    private prevButton: HTMLElement | null;
    private nextButton: HTMLElement | null;
    private currentSlide: number;
    private autoPlayInterval: NodeJS.Timeout | null;
    
    constructor(container: HTMLElement) {
      this.container = container;
      this.slides = container.querySelectorAll<HTMLElement>('[data-slide]');
      this.indicators = container.querySelectorAll<HTMLElement>('[data-indicator]');
      this.prevButton = container.querySelector<HTMLElement>('#prev-slide');
      this.nextButton = container.querySelector<HTMLElement>('#next-slide');
      this.currentSlide = 0;
      this.autoPlayInterval = null;
      
      if (this.slides.length > 0) {
        this.init();
      }
    }
    
    init() {
      if (this.slides.length <= 1) return;
      
      // Initialize first slide as active
      this.goToSlide(0);
      this.bindEvents();
      this.startAutoPlay();
    }
    
    bindEvents() {
      // Botones de navegación
      if (this.prevButton) {
        this.prevButton.addEventListener('click', () => this.prevSlide());
      }
      
      if (this.nextButton) {
        this.nextButton.addEventListener('click', () => this.nextSlide());
      }
      
      // Indicadores
      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goToSlide(index));
      });
      
      // Pausar autoplay en hover
      this.container.addEventListener('mouseenter', () => this.stopAutoPlay());
      this.container.addEventListener('mouseleave', () => this.startAutoPlay());
      
      // Navegación con teclado
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.prevSlide();
        if (e.key === 'ArrowRight') this.nextSlide();
      });
    }
    
    goToSlide(index: number) {
      // Ensure index is within bounds (0-2 for 3 slides)
      index = (index + this.slides.length) % this.slides.length;
      
      // Ocultar slide actual
      this.slides[this.currentSlide].classList.remove('opacity-100');
      this.slides[this.currentSlide].classList.add('opacity-0');
      
      // Actualizar indicadores
      this.indicators[this.currentSlide].classList.remove('bg-opacity-100');
      this.indicators[this.currentSlide].classList.add('bg-opacity-50');
      
      // Mostrar nuevo slide
      this.currentSlide = index;
      this.slides[this.currentSlide].classList.remove('opacity-0');
      this.slides[this.currentSlide].classList.add('opacity-100');
      
      // Actualizar indicadores
      this.indicators[this.currentSlide].classList.remove('bg-opacity-50');
      this.indicators[this.currentSlide].classList.add('bg-opacity-100');
    }
    
    nextSlide() {
      const nextIndex = (this.currentSlide + 1) % this.slides.length;
      this.goToSlide(nextIndex);
    }
    
    prevSlide() {
      const prevIndex = (this.currentSlide - 1 + this.slides.length) % this.slides.length;
      this.goToSlide(prevIndex);
    }
    
    startAutoPlay() {
      if (this.autoPlayInterval || this.slides.length <= 1) return;
      
      this.autoPlayInterval = setInterval(() => {
        this.nextSlide();
      }, 5000); // Cambiar cada 5 segundos
    }
    
    stopAutoPlay() {
      if (this.autoPlayInterval) {
        clearInterval(this.autoPlayInterval);
        this.autoPlayInterval = null;
      }
    }
  }
  
  // Inicializar carousel cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    const carouselContainer = document.querySelector('.relative.w-full.h-\\[60vh\\]');
    if (carouselContainer) {
      new BlogHeroCarousel(carouselContainer);
    }
  });
</script>

<style>
  /* Estilos adicionales si son necesarios */
  .relative.w-full.h-\[60vh\] {
    scroll-behavior: smooth;
  }
</style>