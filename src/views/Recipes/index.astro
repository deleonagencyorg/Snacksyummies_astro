---
// src/components/pages/RecipesPage.astro
import { t } from '../../i18n/i18n';
import type { Locale } from '../../i18n/i18n';
import { getLocale } from '../../i18n/i18n';
import './styles.css';
import RecipeCard from '../../components/recipes/RecipeCard.astro';
import Categories from '../../components/recipes/Categories.astro';
import RecipeMonth from '../../components/recipes/RecipeMonth.astro';
import LazyImage from '../../components/common/LazyImage.astro';
import Breadcrumb from '../../components/common/Breadcrumb/Breadcrumb.astro';
import banner from '../../assets/Banner recetas animado.png';
import group from '../../assets/Group 40.png';
interface Recipe {
  id: string;
  title: string;
  image?: string;
  preparation_time: number;
  type?: string;
  brand?: string;
  servings?: number;
  difficulty?: string;
  slug?: string;
}

const currentLang = getLocale();

// Pass current language to client-side script
const clientLang = currentLang;

// Get all recipe files with correct Vite glob typing
const recipeModules = import.meta.glob<{default: Recipe}>('../../locales/*/recipes/*.json');
const allRecipes: Recipe[] = [];

// Process each file
for (const path in recipeModules) {
  const lang = path.split('/')[3]; // Extract language from path
  if (lang === currentLang) {
    const module = await recipeModules[path]();
    allRecipes.push(module.default);
  }
}

// Compute featured recipe (always the first from full list)
const featured = allRecipes[0];
const featuredTitle = featured?.title ?? '';
const featuredTime = featured ? `${featured.preparation_time}MIN` : '';
const featuredImage = featured?.image || 'https://snack.yummiespromociones.com/SnacksyummiesAssets/placeholder.webp';
const featuredId = featured?.id ?? '';
const featuredServings = (featured as any)?.servings ?? 0;
const featuredDifficulty = (featured as any)?.difficulty ?? '---';
const featuredSlug = featured?.slug ?? '';

---
<div id="hero" class="relative w-full aspect-[4/3] md:h-[32rem] overflow-hidden bg-cover bg-top" style="background-image: url('https://snack.yummiespromociones.com/SnacksyummiesAssets/banerrecipes.jpg');" transition:animate="fade">
  <div class="w-full md:w-[90%] mx-auto px-4 h-full">
    <div class="flex flex-col lg:flex-row items-center justify-center gap-6 h-full">
      <div id="textshero" class="w-full lg:w-1/2 flex justify-center md:justify-start text-center md:text-left">
        <div class="w-full">
          <h1 class="text-[#FDC300] font-sans text-4xl md:text-6xl lg:text-6xl font-bold  text-center w-full mt-12 leading-[5px] md:leading-[10px] lg:leading-[30px]">{currentLang === 'es' ? 'Le damos' : 'Give'}</h1> 
          <h1 class="text-white font-title text-6xl  md:text-8xl lg:text-9xl font-bold  text-center w-full mt-12 leading-[5px] md:leading-[10px] lg:leading-[30px]">{currentLang === 'es' ? 'SABOR' : 'Flavor'}</h1> 
          <h1 class="text-[#FDC300] font-sans text-4xl md:text-6xl lg:text-6xl font-bold  text-center w-full mt-12 leading-[5px] md:leading-[10px] lg:leading-[30px]">{currentLang === 'es' ? 'A LA VIDA' : 'To Life'}</h1> 
        </div>
      </div>
      <div class="w-full lg:w-1/2 flex justify-center">
        <LazyImage
          src={group.src}
          alt="Group overlay"
          class="w-full h-auto"
        />
      </div>
    </div>
  </div>
</div>

<!-- Breadcrumbs -->


<div class="-mt-10 pt-12 pb-16 overflow-hidden" style="background-image: url('https://snack.yummiespromociones.com/SnacksyummiesAssets/bgrecipes2.webp'); background-position: top center;">

  <div class="container mx-auto px-4 mt-12 bg-transparent">
    <Breadcrumb 
  items={[
    { label: 'Home', href: `/${currentLang}` },
    { label: currentLang === 'es' ? 'Recetas' : 'Recipes', href: `/${currentLang}/${currentLang === 'es' ? 'recetas' : 'recipes'}` },
  ]}
  textColor="text-white "
 
/>

<!-- Categories Section (reusable slider) -->
<Categories />

<!-- Recipe of the Month -->
<div class="w-full max-w-5xl px-5 mx-auto bg-white rounded-3xl ">
  <RecipeMonth transparent={true} recipeTitle={featuredTitle} time={featuredTime} image={featuredImage} id={featuredId} slug={featuredSlug} servings={featuredServings} level={featuredDifficulty} />
  </div>

    {allRecipes.length === 0 ? (
      <p class="text-center text-white">{t('page.no_recipes', { namespace: 'recipes' })}</p>
    ) : (
      <div class="max-w-[1028px] mx-auto flex flex-col gap-14 items-center ">
        <!-- Title -->
        {(() => {
          const allTitle = currentLang === 'es' ? 'Todas las recetas' : 'All recipes';
          return (
            <h2 class="text-white font-title text-[40px] font-bold leading-[40px] text-center w-full mt-12">
              {allTitle}
            </h2>
          );
        })()}
        
        <!-- Recipe Grid -->
        {(() => {
          const itemsPerPage = 6; // Mostrar 6 recetas inicialmente
          const totalRecipes = allRecipes.length;

          return (
            <div>
              <div class="w-full">
                <div id="recipes-grid" data-items-per-page={itemsPerPage} data-total-recipes={totalRecipes} data-loaded-count={Math.min(itemsPerPage, totalRecipes)} class="grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-10 place-items-center">
                  {allRecipes.map((recipe: any, index: number) => {
                    const isVisible = index < itemsPerPage;
                    const brandAttr = Array.isArray(recipe.brand) ? recipe.brand.join(',') : (recipe.brand || 'unknown');
                    return (
                      <div 
                        data-recipe-index={index} 
                        data-brand={brandAttr}
                        class={`recipe-item ${isVisible ? 'block' : 'hidden'}`}
                      >
                        <RecipeCard
                          image={recipe.image || 'https://snack.yummiespromociones.com/SnacksyummiesAssets/placeholder.webp'}
                          title={recipe.title}
                          time={`${recipe.preparation_time}MIN`}
                          id={recipe.id}
                          slug={recipe.slug}
                          textColor="text-gray-800"
                          iconColor="text-gray-800"
                        />
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Load More Button */}
              <div class="flex justify-center mt-8">
                <button 
                  id="load-more-btn" 
                  class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-bold py-3 px-8 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
                  style={totalRecipes <= itemsPerPage ? 'display: none;' : ''}
                >
                  <span id="load-more-text">{t('page.load_more', { namespace: 'recipes' })}</span>
                  <span id="loading-text" class="hidden">{t('page.loading', { namespace: 'recipes' })}</span>
                </button>
                
                <div id="no-more-recipes" class="hidden text-gray-600 font-medium py-3">
                  {t('page.no_more_recipes', { namespace: 'recipes' })}
                </div>
              </div>
            </div>
          );
        })()}
      </div>
    )}
  </div>
</div>

<style>
  /* Slide the group image from right into a right-aligned position and keep it above the banner */
  .group-image {
    position: absolute;
    right: 6%;              /* aligned to the right side of the hero */
    top: 50%;
    z-index: 10;
    width: 48.50475rem;     /* requested width */
    height: 14.00113rem;    /* requested height */
    flex-shrink: 0;
    object-fit: contain;
    transform: translate(100%, -50%); /* start off to the right */
    opacity: 0;
    animation: slideInToRight 800ms ease-out forwards;
    pointer-events: none;
  }

  @keyframes slideInToRight {
    from {
      transform: translate(100%, -50%);
      opacity: 0;
    }
    to {
      transform: translate(0, -50%); /* right-aligned position */
      opacity: 1;
    }
  }

  /* Responsive tweak: make overlay smaller on small screens */
  @media (max-width: 768px) {
    .group-image {
      width: 65%;
      height: auto;
      right: 4%;
      animation-duration: 700ms;
    }
  }

  /* Fallback for very small screens */
  @media (max-width: 500px) {
    .group-image {
      width: 55%;
    }
  }
</style>

<script>
  // Ensure the page initializes on first load and after Astro client-side navigations
  function initializeRecipesPage() {
    console.log('[RECIPES] 🚀 Inicializando página de recetas');
    // Guard: if the grid is already initialized on this DOM, skip
    const grid = document.getElementById('recipes-grid');
    if (!grid) {
      console.warn('[RECIPES] ⚠️ No se encontró #recipes-grid');
      return;
    }

    // Fallback image handling (bind on each page load to catch new images)
    const images = document.querySelectorAll('img');
    images.forEach((img) => {
      // To avoid stacking multiple error handlers across navigations, reset by cloning
      const newImg = img.cloneNode(true) as HTMLImageElement;
      newImg.addEventListener('error', function () {
        this.src = 'https://snack.yummiespromociones.com/SnacksyummiesAssets/placeholder.webp';
      });
      if (img.parentNode) img.parentNode.replaceChild(newImg, img);
    });

    const loadMoreBtn = document.getElementById('load-more-btn');
    const loadMoreText = document.getElementById('load-more-text');
    const loadingText = document.getElementById('loading-text');
    const noMoreRecipes = document.getElementById('no-more-recipes');

    if (!grid || !loadMoreBtn || !loadMoreText || !loadingText || !noMoreRecipes) return;

    const itemsPerPage = parseInt(grid.dataset.itemsPerPage || '6');
    const totalRecipes = parseInt(grid.dataset.totalRecipes || '0');
    let loadedCount = parseInt(grid.dataset.loadedCount || itemsPerPage.toString());
    let currentBrandFilter = 'all';

    // Get current language from URL
    const currentLang = window.location.pathname.includes('/es/') ? 'es' : 'en';

    // Get all recipe items
    const allRecipeItems = Array.from(grid.querySelectorAll('.recipe-item'));
    console.log('[RECIPES] 📦 Items de recetas encontrados:', allRecipeItems.length);

    // Filter recipes by brand
    function getFilteredRecipes(brand: string) {
      if (brand === 'all') {
        return allRecipeItems;
      }
      return allRecipeItems.filter((item) => {
        const recipeBrandAttr = item.getAttribute('data-brand') || '';
        // Support multiple brands: attribute may be like "taqueritos,zambos"
        const brandList = recipeBrandAttr.split(',').map((s) => s.trim()).filter(Boolean);
        return brandList.includes(brand);
      });
    }

    // Reset and apply brand filter
    function applyBrandFilter(brand: string) {
      console.log('[RECIPES] 🔍 Aplicando filtro de marca:', brand);
      currentBrandFilter = brand;
      const filteredRecipes = getFilteredRecipes(brand);
      console.log(`[RECIPES] 📦 Recetas filtradas: ${filteredRecipes.length} de ${allRecipeItems.length}`);

      // Hide all recipes first (and remove Tailwind classes that use !important)
      allRecipeItems.forEach((item) => {
        const el = item as HTMLElement;
        el.classList.remove('hidden');
        el.classList.remove('block');
        el.style.display = 'none';
      });

      // Show filtered recipes (up to itemsPerPage)
      const recipesToShow = filteredRecipes.slice(0, itemsPerPage);
      recipesToShow.forEach((item) => {
        const el = item as HTMLElement;
        el.classList.remove('hidden');
        el.classList.add('block');
        el.style.display = 'block';
      });
      console.log(`[RECIPES] ✅ Mostrando ${recipesToShow.length} recetas inicialmente`);

      // Update counters
      loadedCount = recipesToShow.length;
      if (grid) grid.dataset.loadedCount = loadedCount.toString();

      // Update load more button visibility
      if (filteredRecipes.length <= itemsPerPage) {
        if (loadMoreBtn) loadMoreBtn.style.display = 'none';
        if (filteredRecipes.length === 0) {
          if (noMoreRecipes) {
            noMoreRecipes.classList.remove('hidden');
            noMoreRecipes.textContent = currentLang === 'es'
              ? 'No hay recetas para esta marca'
              : 'No recipes for this brand';
          }
        } else {
          if (noMoreRecipes) noMoreRecipes.classList.add('hidden');
        }
      } else {
        if (loadMoreBtn) loadMoreBtn.style.display = 'block';
        if (noMoreRecipes) noMoreRecipes.classList.add('hidden');
      }
    }

    // Listen for brand filter changes
    document.addEventListener('brandFilterChange', (event) => {
      console.log('[RECIPES] 📡 Evento brandFilterChange recibido:', event?.detail);
      // @ts-ignore
      const selectedBrand = event?.detail?.brand || 'all';
      try { sessionStorage.setItem('selectedBrand', selectedBrand); } catch {}
      applyBrandFilter(selectedBrand);
    });

    // Fallback: intercept direct clicks on category pills in case component event is not caught
    document.addEventListener('click', (e) => {
      const target = e.target;
      // @ts-ignore
      const btn = target?.closest?.('.brand-filter-btn');
      if (!btn) return;
      const slug = btn.getAttribute('data-slug') || 'all';
      console.log('[RECIPES] 🖱️ Click fallback en botón de marca:', slug);
      e.preventDefault();
      const u = new URL(window.location.href);
      u.searchParams.set('brand', slug);
      history.pushState({}, '', u.toString());
      try { sessionStorage.setItem('selectedBrand', slug); } catch {}
      applyBrandFilter(slug);
      const grid = document.getElementById('recipes-grid');
      // @ts-ignore
      if (grid && grid.scrollIntoView) grid.scrollIntoView({ behavior: 'smooth', block: 'start' });
    });

    // Attach click handler directly to the button
    loadMoreBtn.addEventListener('click', function() {
      // Show loading state
      if (loadMoreText) loadMoreText.classList.add('hidden');
      if (loadingText) loadingText.classList.remove('hidden');
      loadMoreBtn.setAttribute('disabled', 'true');
      loadMoreBtn.classList.add('opacity-75', 'cursor-not-allowed');

      // Simulate loading delay for better UX
      setTimeout(() => {
        const filteredRecipes = getFilteredRecipes(currentBrandFilter);
        const nextBatch = Math.min(itemsPerPage, filteredRecipes.length - loadedCount);

        // Show next batch of filtered recipes
        const recipesToShow = filteredRecipes.slice(loadedCount, loadedCount + nextBatch);
        recipesToShow.forEach((recipeItem, index) => {
          const htmlElement = recipeItem as HTMLElement;
          htmlElement.style.display = 'block';

          // Add fade-in animation
          htmlElement.style.opacity = '0';
          htmlElement.style.transform = 'translateY(20px)';
          htmlElement.style.transition = 'opacity 0.5s ease, transform 0.5s ease';

          setTimeout(() => {
            htmlElement.style.opacity = '1';
            htmlElement.style.transform = 'translateY(0)';
          }, index * 100); // Staggered animation
        });

        loadedCount += nextBatch;
        grid.dataset.loadedCount = loadedCount.toString();

        // Reset button state
        if (loadMoreText) loadMoreText.classList.remove('hidden');
        if (loadingText) loadingText.classList.add('hidden');
        loadMoreBtn.removeAttribute('disabled');
        loadMoreBtn.classList.remove('opacity-75', 'cursor-not-allowed');

        // Check if all filtered recipes are loaded
        if (loadedCount >= filteredRecipes.length) {
          loadMoreBtn.style.display = 'none';
          if (noMoreRecipes) {
            noMoreRecipes.classList.remove('hidden');
            noMoreRecipes.textContent = currentLang === 'es'
              ? 'No hay más recetas para mostrar'
              : 'No more recipes to show';
          }
        }
      }, 800); // 800ms loading delay
    });

    // Initialize with URL brand param or session value if present
    const urlBrand = new URL(window.location.href).searchParams.get('brand');
    const sessionBrand = sessionStorage.getItem('selectedBrand');
    const initialBrand = urlBrand || sessionBrand || 'all';
    console.log('[RECIPES] 📍 Marca inicial:', { urlBrand, sessionBrand, initialBrand });
    applyBrandFilter(initialBrand);

    // Keep in sync with browser navigation
    window.addEventListener('popstate', () => {
      const b = new URL(window.location.href).searchParams.get('brand') || 'all';
      applyBrandFilter(b);
    });
  }

  // Run on first page load and after navigations
  document.addEventListener('DOMContentLoaded', initializeRecipesPage);
  window.addEventListener('astro:page-load', initializeRecipesPage);
  window.addEventListener('astro:after-swap', initializeRecipesPage);
</script>
